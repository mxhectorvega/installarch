#!/bin/sh

# Variables
LOG_FILE="/tmp/installer.log"
REPO_URL="https://github.com/mxhectorvega/installarch"
CLONE_DIR="/tmp/installarch"
USER=$(whoami)
UNPRIVILEGED_USER="nobody"

# Función para registrar mensajes en el archivo de log
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Función para instalar dependencias
install_dependencies() {
    log "Verificando dependencias..."
    if ! command -v whiptail >/dev/null 2>&1; then
        log "Instalando whiptail..."
        sudo pacman -S --noconfirm libnewt >> "$LOG_FILE" 2>&1 || { log "Error al instalar whiptail"; return 1; }
    fi
    if ! command -v git >/dev/null 2>&1; then
        log "Instalando git..."
        sudo pacman -S --noconfirm git >> "$LOG_FILE" 2>&1 || { log "Error al instalar git"; return 1; }
    fi
    return 0
}

# Función para clonar el repositorio
clone_repo() {
    log "Clonando repositorio..."
    if [ "$USER" = "root" ]; then
        sudo -u "$UNPRIVILEGED_USER" git clone "$REPO_URL" "$CLONE_DIR" >> "$LOG_FILE" 2>&1 || { log "Error al clonar el repositorio"; return 1; }
    else
        git clone "$REPO_URL" "$CLONE_DIR" >> "$LOG_FILE" 2>&1 || { log "Error al clonar el repositorio"; return 1; }
    fi
    return 0
}

# Función para mostrar la pantalla de bienvenida
welcome_screen() {
    whiptail --title "Bienvenido" --msgbox "Bienvenido al instalador de scripts de mxhectorvega\n\nEl archivo de registros se almacenará en: $LOG_FILE" 10 60
    if [ $? -eq 0 ]; then
        if install_dependencies; then
            main_menu
        else
            whiptail --title "Error" --msgbox "Error al instalar dependencias. Consulte el archivo de registros." 10 60
            exit 1
        fi
    else
        exit 1
    fi
}

# Función para mostrar el menú principal
main_menu() {
    while true; do
        choice=$(whiptail --title "Menú Principal" --menu "Seleccione una opción:" 15 60 4 \
            "1" "Lista de scripts" \
            "2" "Mostrar LOG" \
            "3" "Salir" 3>&1 1>&2 2>&3)

        case $choice in
            1) script_list ;;
            2) show_log ;;
            3) exit 0 ;;
            *) whiptail --title "Error" --msgbox "Opción no válida" 10 60 ;;
        esac
    done
}

# Función para mostrar la lista de scripts
script_list() {
    if clone_repo; then
        scripts=$(find "$CLONE_DIR" -type f -executable ! -name "*.*" | awk -F/ '{print $NF}')
        script_array=()
        for script in $scripts; do
            script_array+=("$script" "")
        done

        selected_script=$(whiptail --title "Lista de Scripts" --menu "Seleccione un script para ejecutar:" 15 60 6 "${script_array[@]}" 3>&1 1>&2 2>&3)

        if [ $? -eq 0 ]; then
            install_script "$selected_script"
        else
            main_menu
        fi
    else
        whiptail --title "Error" --msgbox "Error al clonar el repositorio. Consulte el archivo de registros." 10 60
        main_menu
    fi
}

# Función para instalar el script seleccionado
install_script() {
    script_name=$1
    log "Ejecutando script: $script_name"
    steps=$(grep -c '^step_' "$CLONE_DIR/$script_name")
    progress=0

    {
        while read -r line; do
            if echo "$line" | grep -q '^step_'; then
                progress=$((progress + 1))
                echo $((progress * 100 / steps))
            fi
            if echo "$line" | grep -q 'sudo'; then
                password=$(whiptail --title "Contraseña Root" --passwordbox "Ingrese la contraseña de root:" 10 60 3>&1 1>&2 2>&3)
                echo "$password" | sudo -S eval "$line" >> "$LOG_FILE" 2>&1
            else
                eval "$line" >> "$LOG_FILE" 2>&1
            fi
        done < "$CLONE_DIR/$script_name"
    } | whiptail --gauge "Instalando $script_name..." 6 60 0

    if [ $? -eq 0 ]; then
        whiptail --title "Instalación Completa" --msgbox "La instalación de $script_name ha finalizado." 10 60
    else
        whiptail --title "Error" --msgbox "La instalación de $script_name ha fallado. Consulte el archivo de registros para más detalles." 10 60
    fi
}

# Función para mostrar el archivo de registros
show_log() {
    whiptail --title "Archivo de Registros" --textbox "$LOG_FILE" 20 80
}

# Función para limpiar residuos
cleanup() {
    log "Limpiando residuos..."
    rm -rf "$CLONE_DIR"
}

# Capturar la señal de salida para limpiar
trap cleanup EXIT

# Iniciar la pantalla de bienvenida
welcome_screen
