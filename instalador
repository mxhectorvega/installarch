#!/bin/sh

# Variables
LOG_FILE="/tmp/installer.log"
REPO_URL="https://github.com/mxhectorvega/installarch"
REPO_DIR="/tmp/installarch"
SELECTED_SCRIPT=""

# Función para limpiar residuos
cleanup() {
    rm -rf "$REPO_DIR"
    echo "Limpieza completada." >> "$LOG_FILE"
}

# Función para manejar errores
handle_error() {
    echo "Error: $1" >> "$LOG_FILE"
    whiptail --title "Error" --msgbox "Ocurrió un error: $1\nConsulta el archivo de registros en $LOG_FILE para más detalles." 10 60
    cleanup
    exit 1
}

# Función para satisfacer dependencias
install_dependencies() {
    if ! command -v whiptail >/dev/null 2>&1; then
        echo "Instalando whiptail..." >> "$LOG_FILE"
        sudo pacman -S --noconfirm libnewt >> "$LOG_FILE" 2>&1 || handle_error "No se pudo instalar whiptail."
    fi
}

# Función para mostrar la pantalla de bienvenida
welcome_screen() {
    whiptail --title "Bienvenido" --yesno "Bienvenido al instalador de scripts de mxhectorvega.\n\nEl archivo de registros se almacenará en: $LOG_FILE\n\n¿Desea continuar?" 12 60
    if [ $? -eq 0 ]; then
        install_dependencies
        list_scripts_screen
    else
        cleanup
        exit 0
    fi
}

# Función para clonar el repositorio y listar los scripts en una sola columna
list_scripts_screen() {
    echo "Clonando repositorio..." >> "$LOG_FILE"
    git clone "$REPO_URL" "$REPO_DIR" >> "$LOG_FILE" 2>&1 || handle_error "No se pudo clonar el repositorio."

    # Obtener la lista de scripts ejecutables sin extensión
    SCRIPTS=$(find "$REPO_DIR" -type f -executable ! -name "*.*" | awk -F/ '{print $NF}')

    # Formatear la lista para whiptail (una columna vertical)
    SCRIPT_LIST=""
    for script in $SCRIPTS; do
        SCRIPT_LIST="$SCRIPT_LIST $script \"\""
    done

    # Mostrar la lista en una sola columna
    SELECTED_SCRIPT=$(whiptail --title "Lista de Scripts" --menu "Seleccione un script para ejecutar:" 20 60 10 $SCRIPT_LIST 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
        installation_screen
    else
        cleanup
        exit 0
    fi
}

# Función para mostrar la pantalla de instalación
installation_screen() {
    whiptail --title "Instalación" --msgbox "El script seleccionado es: $SELECTED_SCRIPT\n\nPresione OK para continuar." 10 60

    # Simulación de barra de progreso
    {
        for i in {1..10}; do
            echo $((i * 10))
            sleep 1
        done
    } | whiptail --gauge "Instalando $SELECTED_SCRIPT..." 6 60 0

    # Solicitar contraseña si es necesario
    if grep -q "sudo" "$REPO_DIR/$SELECTED_SCRIPT"; then
        PASSWORD=$(whiptail --title "Contraseña Root" --passwordbox "Ingrese la contraseña de root:" 10 60 3>&1 1>&2 2>&3)
        echo "$PASSWORD" | sudo -S "$REPO_DIR/$SELECTED_SCRIPT" >> "$LOG_FILE" 2>&1 || handle_error "Error al ejecutar el script."
    else
        "$REPO_DIR/$SELECTED_SCRIPT" >> "$LOG_FILE" 2>&1 || handle_error "Error al ejecutar el script."
    fi

    final_screen
}

# Función para mostrar la pantalla final
final_screen() {
    whiptail --title "Finalizado" --yesno "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega\n\n¿Desea ver el archivo de registros?" 12 60
    if [ $? -eq 0 ]; then
        whiptail --title "Archivo de Registros" --textbox "$LOG_FILE" 20 60
    fi
    cleanup
    exit 0
}

# Iniciar el instalador
welcome_screen
