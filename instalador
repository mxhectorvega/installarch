#!/usr/bin/env bash

# Configuraci√≥n de colores en ~/.dialogrc para alto contraste (negro y blanco)
cat << EOF > ~/.dialogrc
# Configuraci√≥n de colores para dialog
use_shadow = OFF
use_colors = ON

screen_color = (BLACK,BLACK,ON)

dialog_color = (BLACK,BLACK,ON)
title_color = (WHITE,BLACK,ON)
border_color = (WHITE,BLACK,ON)
button_color = (WHITE,BLACK,ON)
EOF

# Funci√≥n para solicitar la contrase√±a al inicio con asteriscos
mostrar_contrasena() {
    PASSWORD=""
    while true; do
        # Solicitar contrase√±a con asteriscos
        PASSWORD=$(dialog --insecure --passwordbox "Ingrese su contrase√±a de sudo:\n\nüóíÔ∏è Log: /tmp/installarch.log" 10 60 3>&1 1>&2 2>&3)
        # Verificar si se presion√≥ Cancelar
        if [ $? -ne 0 ]; then
            dialog --title "Cancelado" --msgbox "Operaci√≥n cancelada por el usuario." 10 50
            exit 1
        fi
        # Verificar contrase√±a
        echo "$PASSWORD" | sudo -S echo "" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            break
        else
            dialog --title "Error" --msgbox "Contrase√±a incorrecta. Intente de nuevo.\n\nüóíÔ∏è Log: /tmp/installarch.log" 10 60
        fi
    done
}

# Funci√≥n para mostrar la bienvenida
mostrar_bienvenida() {
    dialog --title "Bienvenido a InstallArch" --msgbox "\n\nüíª Bienvenido a InstallArch\n\nTu gestor para la instalaci√≥n y configuraci√≥n de Arch Linux\n\nüåê https://github.com/mxhectorvega/installarch\n\nüóíÔ∏è El log de la instalaci√≥n se guardar√° en /tmp/installarch.log\n" 15 60
}

# Funci√≥n para listar y seleccionar scripts del repositorio
listar_scripts() {
    # Obtener la lista de archivos desde el repositorio
    scripts=$(curl -s https://api.github.com/repos/mxhectorvega/installarch/contents | jq -r '.[] | select(.type=="file") | .name')
    lista=()
    for script in $scripts; do
        # Verificar si el archivo es ejecutable y comienza con #!/usr/bin/env bash
        content=$(curl -s https://raw.githubusercontent.com/mxhectorvega/installarch/main/$script)
        if [[ "$content" =~ ^#!/usr/bin/env\ bash ]]; then
            lista+=("$script" "")
        fi
    done

    if [ ${#lista[@]} -eq 0 ]; then
        dialog --title "Error" --msgbox "No se encontraron scripts en el repositorio.\n\nüóíÔ∏è Log: /tmp/installarch.log" 10 50
        exit 1
    fi

    seleccion=$(dialog --title "Seleccione un script para ejecutar" --menu "Elija el script a ejecutar:\n\nüóíÔ∏è Log: /tmp/installarch.log" 20 60 15 "${lista[@]}" 3>&1 1>&2 2>&3)
    # Verificar si se presion√≥ Cancelar
    if [ $? -ne 0 ]; then
        dialog --title "Cancelado" --msgbox "Operaci√≥n cancelada por el usuario." 10 50
        exit 1
    fi

    echo "$seleccion" > /tmp/menuopt
}

# Funci√≥n para ejecutar el script seleccionado y mostrar el progreso
ejecutar_script() {
    script_url="https://raw.githubusercontent.com/mxhectorvega/installarch/main/$seleccion"

    # Crear archivo de registro con permisos adecuados
    echo "$PASSWORD" | sudo -S touch /tmp/installarch.log
    echo "$PASSWORD" | sudo -S chmod 666 /tmp/installarch.log

    # Descargar el script y guardarlo en un archivo temporal
    temp_script="/tmp/$(basename "$seleccion")"
    wget -q -O "$temp_script" "$script_url"
    chmod +x "$temp_script"

    # Contar el n√∫mero de comandos (pasos) en el script
    total_pasos=$(grep -c '^[^#]' "$temp_script")

    # Ejecutar el script temporal y mostrar el progreso
    paso_actual=0
    (
        while IFS= read -r linea; do
            # Omitir l√≠neas en blanco y comentarios
            if [[ -z "$linea" || "$linea" =~ ^\# ]]; then
                continue
            fi
            # Mostrar el comando actual en el log
            echo "\$ $linea" >> /tmp/installarch.log
            # Ejecutar el comando y redirigir la salida al log
            echo "$PASSWORD" | sudo -S bash -c "$linea" >> /tmp/installarch.log 2>&1
            paso_actual=$((paso_actual + 1))
            # Calcular y mostrar el progreso
            progreso=$((paso_actual * 100 / total_pasos))
            echo $progreso
            sleep 0.5
        done < "$temp_script"
    ) | dialog --title "Progreso de instalaci√≥n" --gauge "Instalando $seleccion...\n\nüóíÔ∏è Log: /tmp/installarch.log" 10 70 0

    # Mostrar el contenido del archivo de registro
    dialog --title "Instalaci√≥n completada" --msgbox "La instalaci√≥n ha finalizado. Puedes revisar el log en /tmp/installarch.log" 10 60
    dialog --title "Log de instalaci√≥n" --textbox /tmp/installarch.log 20 70
}

# Funci√≥n para verificar e instalar dependencias necesarias
instalar_dependencias() {
    echo "$PASSWORD" | sudo -S pacman -Sy --noconfirm
    for cmd in dialog wget jq; do
        if ! command -v "$cmd" &>/dev/null; then
            echo "$PASSWORD" | sudo -S pacman -S "$cmd" --noconfirm --needed
        fi
    done
}

# Mostrar bienvenida
mostrar_bienvenida

# Instalar dependencias
mostrar_contrasena
instalar_dependencias

# Listar scripts y seleccionar uno
listar_scripts

# Ejecutar el script seleccionado y mostrar el progreso
ejecutar_script

# Mensaje final
dialog --title "Finalizado" --msgbox "\n\n‚ù§Ô∏è Gracias por usar InstallArch\n\nüåê https://github.com/mxhectorvega/installarch\n\nüóíÔ∏è Log: /tmp/installarch.log" 15 60

# Limpiar archivos temporales si existen
rm -f /tmp/menuopt /tmp/$(basename "$seleccion") 2>/dev/null
