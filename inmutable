#!/usr/bin/env bash

# Script para transformar Arch Linux en un
# sistema inmutable con actualizaciones
# transaccionales utilizando systemd-boot
# Adaptado para instalaciones con archinstall
# Repositorio: https://github.com/mxhectorvega/installarch
# Ejecución: bash <(curl -L tinyurl.com/mxinmutable)
# Fecha de actualización: 10/02/2025
# Versión: 1.1

set -euo pipefail

# ----------------------------------------------
# CONFIGURACIÓN DE COLORES Y VARIABLES GLOBALES
# ----------------------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

LOG_FILE="/var/log/btrfs-manager.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
HOOK_SCRIPT="/usr/local/bin/update-boot-entries"

# --------------------------------------
# FUNCIÓN DE REGISTRO MEJORADA
# --------------------------------------
log() {
    local tipo="$1"
    local mensaje="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    case $tipo in
        "ÉXITO") color="${GREEN}" ;;
        "ADVERTENCIA") color="${YELLOW}" ;;
        "ERROR") color="${RED}" ;;
        *) color="${CYAN}" ;;
    esac

    echo -e "${MAGENTA}[${timestamp}] ${color}${tipo}: ${mensaje}${NC}" | tee -a "$LOG_FILE"
}

# --------------------------------------
# MANEJO DE ERRORES ROBUSTO
# --------------------------------------
manejar_error() {
    log "ERROR" "Fallo en línea $1: $2"
    log "ADVERTENCIA" "Realizando limpieza de emergencia..."

    # Limpiar montajes temporales
    if mountpoint -q /mnt/root; then
        umount -l /mnt/root || true
        rm -rf /mnt/root
    fi

    log "ERROR" "Ejecución abortada. Verifique el log: ${LOG_FILE}"
    exit 1
}

trap 'manejar_error ${LINENO} "$BASH_COMMAND"' ERR

# --------------------------------------
# VERIFICACIÓN DE ESTRUCTURA BTRFS
# --------------------------------------
verificar_estructura() {
    log "INFO" "Validando estructura de subvolúmenes Btrfs..."

    local subvolumenes=("@home" "@.snapshots" "@log" "@pkg")
    local dispositivo_raiz=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')

    mkdir -p /mnt/root || {
        log "ERROR" "Fallo al crear directorio temporal /mnt/root"
        exit 1
    }

    if ! mount -t btrfs -o subvol=@ "$dispositivo_raiz" /mnt/root; then
        log "ERROR" "Error crítico al montar subvolumen raíz"
        exit 1
    fi

    for subvol in "${subvolumenes[@]}"; do
        if ! btrfs subvolume list /mnt/root | grep -q "path $subvol$"; then
            log "ERROR" "Subvolumen requerido '$subvol' no encontrado"
            exit 1
        fi
    done

    umount /mnt/root
    rm -rf --no-preserve-root /mnt/root
    log "ÉXITO" "Estructura Btrfs validada correctamente"
}

# --------------------------------------
# INSTALACIÓN DE DEPENDENCIAS
# --------------------------------------
instalar_dependencias() {
    log "INFO" "Actualizando sistema e instalando dependencias..."

    pacman -Syu --noconfirm | tee -a "$LOG_FILE"

    local dependencias=(
        snapper snap-pac grub-btrfs
        btrfs-progs inotify-tools
        python-dbus python-notify2
        efibootmgr dosfstools
    )

    for pkg in "${dependencias[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "INFO" "Instalando: $pkg..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        else
            log "INFO" "Paquete $pkg ya está instalado"
        fi
    done
}

# --------------------------------------
# CONFIGURACIÓN DE SNAPPER
# --------------------------------------
configurar_snapper() {
    log "INFO" "Configurando Snapper con política de retención..."

    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        snapper -c root create-config /.snapshots | tee -a "$LOG_FILE"

        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY="5" \
            TIMELINE_LIMIT_DAILY="7" \
            TIMELINE_LIMIT_WEEKLY="0" | tee -a "$LOG_FILE"

        chmod 750 /.snapshots
        chown :wheel /.snapshots
    fi

    systemctl enable --now snapper-timeline.timer snapper-cleanup.timer
    log "ÉXITO" "Snapper configurado exitosamente"
}

# --------------------------------------
# SISTEMA DE ACTUALIZACIONES
# --------------------------------------
configurar_actualizaciones() {
    log "INFO" "Implementando actualizaciones transaccionales..."

    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

LOG_FILE="/var/log/transactional-update.log"
SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualización automática")

# Crear entorno seguro
btrfs subvolume snapshot /.snapshots/${SNAPSHOT_ID}/snapshot /.snapshots/${SNAPSHOT_ID}/writable
mount --bind / /.snapshots/${SNAPSHOT_ID}/writable

cleanup() {
    umount -l /.snapshots/${SNAPSHOT_ID}/writable
    btrfs subvolume delete /.snapshots/${SNAPSHOT_ID}/writable
    snapper delete ${SNAPSHOT_ID}
    exit 1
}
trap cleanup ERR

# Ejecutar actualización
arch-chroot /.snapshots/${SNAPSHOT_ID}/writable pacman -Syu --noconfirm

# Snapshot post-actualización
snapper create -t post --pre-number ${SNAPSHOT_ID} --description "Post-actualización"

# Actualizar entradas de arranque
/usr/local/bin/update-boot-entries

EOF

    chmod +x /usr/bin/transactional-update

    # Configurar servicio automático
    cat <<EOF > /etc/systemd/system/transactional-update.service
[Unit]
Description=Actualización Transaccional del Sistema
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > /etc/systemd/system/transactional-update.timer
[Unit]
Description=Actualizaciones Diarias Automáticas

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
}

# --------------------------------------
# CONFIGURACIÓN DE SYSTEMD-BOOT (CORREGIDO)
# --------------------------------------
configurar_boot() {
    log "INFO" "Configurando systemd-boot con entradas dinámicas..."

    # Eliminar entradas antiguas
    rm -f "${BOOT_LOADER_ENTRIES}"/*.conf

    # Crear hook de actualización mejorado
    cat <<'EOF' > $HOOK_SCRIPT
#!/bin/bash
set -euo pipefail

# Variables críticas
BOOT_DIR="/boot/loader/entries"
ROOT_DEVICE=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')
ROOT_UUID=$(blkid -s UUID -o value "${ROOT_DEVICE}")
KERNEL_VERSION=$(file /boot/vmlinuz-* | grep -oP 'version \K[^ ]+' | sort -V | tail -n1)
VMLINUZ="/boot/vmlinuz-${KERNEL_VERSION}"
INITRAMFS="/boot/initramfs-${KERNEL_VERSION}.img"

# Crear directorio si no existe
mkdir -p "${BOOT_DIR}"

# Generar entrada principal
cat <<CONF > "${BOOT_DIR}/arch.conf"
title Arch Linux (Sistema Actual)
linux ${VMLINUZ}
initrd ${INITRAMFS}
options root=UUID=${ROOT_UUID} rootflags=subvol=@,defaults,noatime,compress=zstd rw
CONF

# Generar entradas para snapshots
snapper -c root list | awk '/pre|post/ {print $1}' | while read -r snap_id; do
    DESCRIPCION=$(snapper -c root info $snap_id | grep "Description" | cut -d':' -f2 | sed 's/^ *//;s/ *$//')

    cat <<CONF > "${BOOT_DIR}/arch-snapshot-${snap_id}.conf"
title Arch Linux (Snapshot #${snap_id}) - ${DESCRIPCION}
linux ${VMLINUZ}
initrd ${INITRAMFS}
options root=UUID=${ROOT_UUID} rootflags=subvol=@.snapshots/${snap_id}/snapshot,defaults,noatime,compress=zstd rw
CONF
done

# Actualizar bootloader y eliminar entradas antiguas
find "${BOOT_DIR}" -name "*-linux.conf" -delete
bootctl update

EOF

    chmod +x $HOOK_SCRIPT

    # Añadir hook permanente
    echo "POST_CREATE_SNAPSHOT=\"${HOOK_SCRIPT}\"" >> /etc/snapper/configs/root

    # Ejecutar hook manualmente
    $HOOK_SCRIPT

    log "ÉXITO" "Entradas de arranque regeneradas: $(ls -1 ${BOOT_LOADER_ENTRIES})"
}

# --------------------------------------
# FUNCIÓN PRINCIPAL
# --------------------------------------
main() {
    log "INFO" "Iniciando configuración del sistema..."
    verificar_estructura
    instalar_dependencias
    configurar_snapper
    configurar_actualizaciones
    configurar_boot

    log "ÉXITO" "¡Configuración completada exitosamente!"
    log "ADVERTENCIA" "Acciones recomendadas:"
    log "INFO" "1. Verifique las entradas: ls -l /boot/loader/entries"
    log "INFO" "2. Revise los timers: systemctl list-timers"
    log "INFO" "3. Ejecute una prueba: sudo transactional-update"
    log "INFO" "4. Monitorice los logs: tail -f ${LOG_FILE}"
}

# --------------------------------------
# EJECUCIÓN
# --------------------------------------
main "$@"
#up7
