#!/bin/bash

# Variables globales
LOG_FILE="/var/log/installarch.log"
REPO_URL="https://github.com/mxhectorvega/installarch.git"
TEMP_DIR="/tmp/installarch"
ROOT_PASS=""
SCRIPTS_DIR="$TEMP_DIR/scripts"

# Función para limpiar residuos
cleanup() {
    rm -rf "$TEMP_DIR"
}

# Función para manejar errores
error_handler() {
    local error_msg="$1"
    whiptail --title "Error" --msgbox "$error_msg\nConsulte el archivo de registro: $LOG_FILE" 8 60
    cleanup
    exit 1
}

# Función para verificar si estamos en root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        whiptail --title "Permiso denegado" --msgbox "Este script debe ejecutarse como root." 8 40
        cleanup
        exit 1
    fi
}

# Función para almacenar la contraseña root
store_root_password() {
    ROOT_PASS=$(whiptail --passwordbox "Ingrese la contraseña de root:" 8 40 --title "Contraseña de root" 3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        error_handler "Operación cancelada por el usuario."
    fi
}

# Función para ejecutar comandos como root o cambiar al usuario sin privilegios
run_command() {
    local command="$1"
    if [[ "$command" == *"makepkg"* || "$command" == *"git"* ]]; then
        su -c "$command" -s /bin/sh $(logname) >> "$LOG_FILE" 2>&1
    else
        echo "$ROOT_PASS" | sudo -S sh -c "$command" >> "$LOG_FILE" 2>&1
    fi
    if [[ $? -ne 0 ]]; then
        error_handler "El comando '$command' falló."
    fi
}

# Función para mostrar la pantalla de bienvenida
welcome_screen() {
    whiptail --title "Bienvenido al instalador de scripts de mxhectorvega" \
        --yesno "Este instalador creará un archivo de registro en:\n$LOG_FILE\n¿Desea continuar?" 10 60
    if [[ $? -ne 0 ]]; then
        cleanup
        exit 0
    fi
}

# Función para clonar el repositorio y listar scripts
list_scripts() {
    mkdir -p "$TEMP_DIR"
    git clone "$REPO_URL" "$TEMP_DIR" >> "$LOG_FILE" 2>&1
    if [[ $? -ne 0 ]]; then
        error_handler "No se pudo clonar el repositorio."
    fi

    SCRIPT_LIST=()
    mapfile -t SCRIPT_LIST < <(find "$TEMP_DIR" -maxdepth 1 -type f -executable ! -name "*.*" -exec basename {} \; | sort)

    CHOICE=$(whiptail --title "Lista de scripts" --menu "Seleccione un script para ejecutar:" 20 60 10 \
        $(for i in "${!SCRIPT_LIST[@]}"; do echo "$((i+1))" "${SCRIPT_LIST[$i]}"; done) \
        --cancel-button Cancelar --ok-button Siguiente 3>&1 1>&2 2>&3)
    if [[ $? -ne 0 ]]; then
        cleanup
        exit 0
    fi

    SELECTED_SCRIPT="${SCRIPT_LIST[$((CHOICE-1))]}"
}

# Función para mostrar la barra de progreso durante la instalación
installation_progress() {
    local script_path="$TEMP_DIR/$SELECTED_SCRIPT"
    total_steps=$(grep -oP '^# STEP' "$script_path" | wc -l)
    current_step=0

    (
        while IFS= read -r line; do
            echo "$line" >> "$LOG_FILE" 2>&1
            if [[ "$line" == "# STEP"* ]]; then
                ((current_step++))
                echo "$current_step"
            fi
        done < <(bash "$script_path" 2>&1)
    ) | whiptail --gauge "Instalando $SELECTED_SCRIPT..." 6 60 0

    if [[ $? -ne 0 ]]; then
        error_handler "La instalación falló."
    fi
}

# Función para mostrar la pantalla final
final_screen() {
    whiptail --title "Finalizado" --msgbox "¡Gracias por usar el instalador!\n♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega" 10 60

    if whiptail --title "Mostrar registro" --yesno "¿Desea ver el archivo de registro?" 8 60; then
        whiptail --scrolltext --title "Archivo de registro" --textbox "$LOG_FILE" 20 70
    fi
}

# Main script execution
main() {
    check_root
    store_root_password

    # Verificar dependencias
    DEPENDENCIES=("whiptail" "git" "sudo")
    for dep in "${DEPENDENCIES[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            error_handler "Se requiere la dependencia '$dep'. Por favor, instálela primero."
        fi
    done

    welcome_screen
    list_scripts
    installation_progress
    final_screen

    cleanup
    exit 0
}

# Ejecución del script principal
main
