#!/bin/sh

# Variables globales
REPO_URL="https://github.com/mxhectorvega/installarch"
REPO_DIR="$HOME/installarch"
LOG_FILE="$HOME/installarch.log"
TEMP_DIR="/tmp/installarch_temp"
ROOT_PASS=""
USER_PASS=""

# Colores y estilo
BOLD="\033[1m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
RESET="\033[0m"

# Función para mostrar mensajes de error
error() {
    echo -e "${RED}${BOLD}Error: $1${RESET}"
    echo -e "${YELLOW}Revisa el archivo de registros: $LOG_FILE${RESET}"
    cat "$LOG_FILE"
    exit 1
}

# Función para limpiar archivos temporales
cleanup() {
    rm -rf "$TEMP_DIR"
}

# Función para clonar el repositorio
clone_repo() {
    if [ -d "$REPO_DIR" ]; then
        echo -e "${YELLOW}Eliminando repositorio existente...${RESET}"
        rm -rf "$REPO_DIR" || error "No se pudo eliminar el repositorio existente."
    fi

    echo -e "${BLUE}Clonando repositorio...${RESET}"
    git clone "$REPO_URL" "$REPO_DIR" > "$LOG_FILE" 2>&1 || error "No se pudo clonar el repositorio."
}

# Función para validar dependencias
validate_dependencies() {
    echo -e "${BLUE}Validando dependencias...${RESET}"
    for dep in git makepkg; do
        if ! command -v "$dep" > /dev/null 2>&1; then
            echo -e "${YELLOW}Instalando $dep...${RESET}"
            sudo pacman -S --noconfirm "$dep" >> "$LOG_FILE" 2>&1 || error "No se pudo instalar $dep."
        fi
    done
}

# Función para mostrar la pantalla de bienvenida
welcome_screen() {
    clear
    echo -e "${GREEN}${BOLD}Bienvenido al instalador de scripts de mxhectorvega${RESET}"
    echo -e "El archivo de registros se almacenará en: $LOG_FILE"
    echo -e "${BLUE}1. Iniciar${RESET}"
    echo -e "${RED}2. Cancelar${RESET}"
    read -p "Selecciona una opción: " choice

    case $choice in
        1) clone_repo ;;
        2) exit 0 ;;
        *) error "Opción no válida." ;;
    esac
}

# Función para mostrar la lista de scripts
list_scripts() {
    clear
    echo -e "${GREEN}${BOLD}Lista de scripts disponibles:${RESET}"
    scripts=($(find "$REPO_DIR" -type f -executable ! -name "*.*"))
    for i in "${!scripts[@]}"; do
        echo -e "${BLUE}$((i+1)). ${scripts[$i]##*/}${RESET}"
    done
    echo -e "${BLUE}$((i+2)). Siguiente${RESET}"
    echo -e "${YELLOW}$((i+3)). Atrás${RESET}"
    echo -e "${RED}$((i+4)). Cancelar${RESET}"
    read -p "Selecciona una opción: " choice

    if [ "$choice" -le "${#scripts[@]}" ] && [ "$choice" -gt 0 ]; then
        selected_script="${scripts[$((choice-1))]}"
        install_screen
    elif [ "$choice" -eq "$((i+2))" ]; then
        install_screen
    elif [ "$choice" -eq "$((i+3))" ]; then
        welcome_screen
    elif [ "$choice" -eq "$((i+4))" ]; then
        exit 0
    else
        error "Opción no válida."
    fi
}

# Función para mostrar la pantalla de instalación
install_screen() {
    clear
    echo -e "${GREEN}${BOLD}Instalando ${selected_script##*/}...${RESET}"
    steps=$(grep -c "^step" "$selected_script")
    for ((i=1; i<=steps; i++)); do
        echo -e "${BLUE}Ejecutando paso $i de $steps...${RESET}"
        sed -n "/^step $i/,/^step $((i+1))/p" "$selected_script" | sh >> "$LOG_FILE" 2>&1 || {
            error "Error en el paso $i."
        }
        echo -e "${GREEN}Paso $i completado.${RESET}"
    done
    final_screen
}

# Función para mostrar la pantalla final
final_screen() {
    clear
    echo -e "${GREEN}${BOLD}La instalación ha finalizado.${RESET}"
    echo -e "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega"
    echo -e "${BLUE}1. Finalizar${RESET}"
    echo -e "${YELLOW}2. Mostrar archivo de registros${RESET}"
    read -p "Selecciona una opción: " choice

    case $choice in
        1) cleanup; exit 0 ;;
        2) less "$LOG_FILE" ;;
        *) error "Opción no válida." ;;
    esac
}

# Inicio del script
welcome_screen
validate_dependencies
list_scripts
