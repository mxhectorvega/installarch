#!/usr/bin/env bash
set -euo pipefail

# Configuración de colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Variables globales
LOG_FILE="/var/log/btrfs-transactional-setup.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
SYSTEMD_SERVICE="/etc/systemd/system/transactional-update.service"
SYSTEMD_TIMER="/etc/systemd/system/transactional-update.timer"
HOOK_SCRIPT="/usr/local/bin/update-systemd-boot"

# Función de logging mejorada
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local color_code

    case $level in
        "INFO") color_code="${BLUE}" ;;
        "SUCCESS") color_code="${GREEN}" ;;
        "WARNING") color_code="${YELLOW}" ;;
        "ERROR") color_code="${RED}" ;;
        *) color_code="${NC}" ;;
    esac

    echo -e "${MAGENTA}[${timestamp}] ${color_code}${level}: ${message}${NC}" | tee -a "$LOG_FILE"
}

# Manejo de errores
error_handler() {
    log "ERROR" "Fallo en línea $1: $2"
    log "WARNING" "Iniciando recuperación..."

    # Rollback de montajes
    if mountpoint -q /mnt/btrfs_root; then
        umount -l /mnt/btrfs_root || true
        rm -rf /mnt/btrfs_root
    fi

    log "ERROR" "Proceso abortado. Verifique el log: ${LOG_FILE}"
    exit 1
}

trap 'error_handler ${LINENO} "$BASH_COMMAND"' ERR

# Verificar root
check_root() {
    [[ $EUID -ne 0 ]] && log "ERROR" "Ejecutar como root" && exit 1
}

# Instalar dependencias
install_dependencies() {
    log "INFO" "Verificando dependencias..."
    local deps=(
        snapper snap-pac btrfs-progs
        inotify-tools python-dbus
    )

    for pkg in "${deps[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "INFO" "Instalando $pkg..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        fi
    done
}

# Configurar Snapper con estructura de subvolúmenes
configure_snapper() {
    log "INFO" "Configurando Snapper..."
    local btrfs_root=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')

    # Manejar subvolumen @.snapshots
    if ! btrfs subvolume list / | grep -q '@.snapshots'; then
        log "WARNING" "Creando subvolumen @.snapshots..."
        mkdir -p /mnt/btrfs_root
        mount -t btrfs -o noatime,compress=zstd "$btrfs_root" /mnt/btrfs_root
        btrfs subvolume create "/mnt/btrfs_root/@.snapshots"
        umount /mnt/btrfs_root
        rm -rf /mnt/btrfs_root
    fi

    # Configurar Snapper si no existe
    if ! snapper list-configs | grep -q root; then
        log "INFO" "Creando configuración de Snapper..."
        snapper -c root create-config -f btrfs /.snapshots

        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY=5 \
            TIMELINE_LIMIT_DAILY=7 \
            TIMELINE_LIMIT_WEEKLY=0 \
            SYNC_ACL=yes

        chmod 750 /.snapshots
        chown :wheel /.snapshots
    fi

    systemctl enable --now snapper-timeline.timer snapper-cleanup.timer
}

# Sistema de actualizaciones transaccionales
setup_transactional_updates() {
    log "INFO" "Configurando actualizaciones transaccionales..."

    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualización automática")
LOG_FILE="/var/log/transactional-update.log"

btrfs subvolume snapshot /.snapshots/$SNAPSHOT_ID/snapshot /.snapshots/$SNAPSHOT_ID/writable
mount --bind / /.snapshots/$SNAPSHOT_ID/writable

cleanup() {
    umount -l /.snapshots/$SNAPSHOT_ID/writable
    btrfs subvolume delete /.snapshots/$SNAPSHOT_ID/writable
    snapper delete $SNAPSHOT_ID
    exit 1
}
trap cleanup ERR

arch-chroot /.snapshots/$SNAPSHOT_ID/writable pacman -Syu --noconfirm
snapper create -t post --pre-number $SNAPSHOT_ID --description "Post-actualización"
/usr/local/bin/update-systemd-boot
EOF

    chmod +x /usr/bin/transactional-update

    # Configurar servicio systemd
    cat <<EOF > $SYSTEMD_SERVICE
[Unit]
Description=Actualización Transaccional
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > $SYSTEMD_TIMER
[Unit]
Description=Actualizaciones Diarias Automáticas

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
}

# Configurar systemd-boot
setup_systemdboot() {
    log "INFO" "Configurando systemd-boot..."

    # Instalar systemd-boot si no está presente
    if [[ ! -f "/boot/loader/loader.conf" ]]; then
        bootctl install | tee -a "$LOG_FILE"
        echo "default arch.conf" > /boot/loader/loader.conf
    fi

    # Hook de actualización
    cat <<'EOF' > $HOOK_SCRIPT
#!/bin/bash
set -euo pipefail

root_uuid=$(findmnt / -o UUID -n)
current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)

# Eliminar entradas antiguas
rm -f /boot/loader/entries/arch-snapshot-*.conf

# Generar nuevas entradas
snapper -c root list | awk '/pre|post/ {print $1}' | while read sid; do
    desc=$(snapper -c root info $sid | grep "Description" | cut -d':' -f2 | sed 's/^ *//;s/ *$//')
    cat <<CONF > "/boot/loader/entries/arch-snapshot-${sid}.conf"
title Arch Linux (Snapshot #${sid}) - ${desc}
linux /vmlinuz-${current_kernel}
initrd /initramfs-${current_kernel}.img
options root=UUID=${root_uuid} rootflags=subvol=@.snapshots/${sid}/snapshot rw
CONF
done

# Entrada principal
cat <<CONF > "/boot/loader/entries/arch.conf"
title Arch Linux (Current)
linux /vmlinuz-${current_kernel}
initrd /initramfs-${current_kernel}.img
options root=UUID=${root_uuid} rootflags=subvol=@ rw
CONF

bootctl update
EOF

    chmod +x $HOOK_SCRIPT
    echo "POST_CREATE_SNAPSHOT=\"$HOOK_SCRIPT\"" >> /etc/snapper/configs/root
    $HOOK_SCRIPT
}

# Limpieza automática
setup_cleanup() {
    log "INFO" "Configurando limpieza..."

    cat <<EOF > /etc/systemd/system/snapper-cleanup.service
[Unit]
Description=Limpieza de Snapshots

[Service]
Type=oneshot
ExecStart=/usr/bin/sh -c 'snapper cleanup number && snapper cleanup timeline'
EOF

    cat <<EOF > /etc/systemd/system/snapper-cleanup.timer
[Unit]
Description=Limpieza Semanal de Snapshots

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl enable --now snapper-cleanup.timer
}

main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates
    setup_systemdboot
    setup_cleanup

    log "SUCCESS" "Configuración completada!"
    log "INFO" "Recomendaciones:"
    log "INFO" "1. Verifique entradas de arranque: /boot/loader/entries"
    log "INFO" "2. Revise timers: systemctl list-timers"
    log "WARNING" "Reiniciar para aplicar todos los cambios"
}

main "$@"
#update20
