#!/usr/bin/env bash
set -e pipefail

#set -euo pipefail

# Configuraci√≥n de colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Variables de entorno y rutas
LOG_FILE="/var/log/transactional-update.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
SYSTEMD_SERVICE="/etc/systemd/system/transactional-update.service"
SYSTEMD_TIMER="/etc/systemd/system/transactional-update.timer"

# Funci√≥n para registro de eventos
log() {
    local message="$1"
    echo -e "${MAGENTA}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}" | tee -a "$LOG_FILE"
}

# Funci√≥n de manejo de errores mejorada
error_handler() {
    local line="$1"
    local cmd="$2"
    log "${RED}‚úó Error en l√≠nea ${line}: ${cmd}${NC}"
    log "${YELLOW}‚ö†Ô∏è  Iniciando recuperaci√≥n...${NC}"

    # Limpiar montajes residuales
    if mountpoint -q /mnt/root; then
        umount -l /mnt/root || true
        rm -rf /mnt/root
    fi

    exit 1
}

trap 'error_handler ${LINENO} "$BASH_COMMAND"' ERR

# Verificar root
check_root() {
    [[ $EUID -ne 0 ]] && echo -e "${RED}‚ùå Ejecutar como root${NC}" >&2 && exit 1
}

# Instalar dependencias
install_dependencies() {
    log "${BLUE}üîç Verificando dependencias...${NC}"
    local deps=(
        snapper grub-btrfs snap-pac
        python-dbus python-notify2
        inotify-tools btrfs-progs
    )

    for pkg in "${deps[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "Instalando ${CYAN}${pkg}${NC}..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        else
            log "‚úì ${GREEN}${pkg}${NC} ya instalado"
        fi
    done
}

# Configuraci√≥n de Snapper corregida
configure_snapper() {
    log "${BLUE}üõ†Ô∏è  Configurando Snapper...${NC}"

    local root_dev=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//;s/^ //')
    local subvol_path="@.snapshots"

    if btrfs subvolume list / | grep -q "path ${subvol_path}$"; then
        log "${YELLOW}‚ö†Ô∏è  Subvolumen existente detectado...${NC}"

        # Manejo seguro del subvolumen
        mkdir -p /mnt/root
        log "Montando ${root_dev} en /mnt/root..."
        mount -t btrfs -o noatime,compress=zstd "${root_dev}" /mnt/root

        if [ -d "/mnt/root/${subvol_path}" ]; then
            log "${YELLOW}üóëÔ∏è  Eliminando subvolumen anterior...${NC}"
            btrfs subvolume delete "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"
            sync
        fi

        log "${BLUE}üÜï Creando nuevo subvolumen...${NC}"
        btrfs subvolume create "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"

        umount /mnt/root
        rm -rf /mnt/root
    fi

    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        log "${BLUE}üìù Creando configuraci√≥n de Snapper...${NC}"
        snapper -c root create-config / | tee -a "$LOG_FILE"

        # Configuraci√≥n √≥ptima
        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY="5" \
            TIMELINE_LIMIT_DAILY="7" \
            TIMELINE_CLEANUP="yes" | tee -a "$LOG_FILE"

        chmod 750 /.snapshots
        chown :wheel /.snapshots
        systemctl enable --now snapper-timeline.timer | tee -a "$LOG_FILE"
    fi
}

# Sistema de actualizaciones transaccionales
setup_transactional_updates() {
    log "${BLUE}‚öôÔ∏è  Configurando actualizaciones...${NC}"

    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Pre-actualizaci√≥n")
LOG_FILE="/var/log/transactional-update.log"

cleanup() {
    umount -l /.snapshots/${SNAPSHOT_ID}/writable 2>/dev/null || true
    btrfs subvolume delete /.snapshots/${SNAPSHOT_ID}/writable 2>>$LOG_FILE
    snapper delete ${SNAPSHOT_ID} 2>>$LOG_FILE
}
trap cleanup EXIT

btrfs subvolume snapshot /.snapshots/${SNAPSHOT_ID}/snapshot /.snapshots/${SNAPSHOT_ID}/writable
mount --bind / /.snapshots/${SNAPSHOT_ID}/writable
arch-chroot /.snapshots/${SNAPSHOT_ID}/writable pacman -Syu --noconfirm
snapper create -t post --pre-number ${SNAPSHOT_ID} --description "Post-actualizaci√≥n"
EOF

    chmod +x /usr/bin/transactional-update

    # Configurar systemd
    cat <<EOF > "$SYSTEMD_SERVICE"
[Unit]
Description=Actualizaci√≥n Transaccional
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > "$SYSTEMD_TIMER"
[Unit]
Description=Actualizaciones Diarias

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
}

# Funci√≥n principal
main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates

    log "${GREEN}‚úÖ Configuraci√≥n completada!${NC}"
    log "${YELLOW}‚ö†Ô∏è  Recomendado: Revisar /boot/loader/entries y reiniciar${NC}"
}

main "$@"
#test12
