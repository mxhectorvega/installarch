#!/usr/bin/env bash
set -euo pipefail

# Configuración de colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Sin color

# Variables de entorno y rutas
LOG_FILE="/var/log/transactional-update.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
SYSTEMD_SERVICE="/etc/systemd/system/transactional-update.service"
SYSTEMD_TIMER="/etc/systemd/system/transactional-update.timer"
SNAPSHOT_CLEANUP_SERVICE="/etc/systemd/system/snapper-cleanup.service"
SNAPSHOT_CLEANUP_TIMER="/etc/systemd/system/snapper-cleanup.timer"

# Función para registro de eventos
log() {
    local message="$1"
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}" | tee -a "$LOG_FILE"
}

# Función de manejo de errores
error_handler() {
    local line="$1"
    local cmd="$2"
    log "${RED}Error en línea ${line}: ${cmd}${NC}"
    log "${YELLOW}Iniciando rollback...${NC}"
    # Lógica de rollback (ejemplo)
    snapper undochange 2-3  # Ajustar según configuración
    exit 1
}

trap 'error_handler ${LINENO} "$BASH_COMMAND"' ERR

# Verificar si se ejecuta como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Este script debe ejecutarse como root${NC}" >&2
        exit 1
    fi
}

# Instalar dependencias necesarias
install_dependencies() {
    log "Instalando dependencias..."
    local dependencies=(
        snapper
        grub-btrfs
        snap-pac
        python-dbus
        python-notify2
        inotify-tools
    )

    for pkg in "${dependencies[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        fi
    done
}

# Configurar snapper
configure_snapper() {
    log "Configurando snapper..."
    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        snapper -c root create-config / | tee -a "$LOG_FILE"
        sed -i 's/^ALLOW_USERS=.*/ALLOW_USERS="root"/' /etc/snapper/configs/root
        sed -i 's/^TIMELINE_LIMIT_HOURLY=.*/TIMELINE_LIMIT_HOURLY="5"/' /etc/snapper/configs/root
        sed -i 's/^TIMELINE_LIMIT_DAILY=.*/TIMELINE_LIMIT_DAILY="7"/' /etc/snapper/configs/root
        systemctl enable snapper-timeline.timer snapper-cleanup.timer | tee -a "$LOG_FILE"
        systemctl start snapper-timeline.timer snapper-cleanup.timer | tee -a "$LOG_FILE"
    fi
}

# Configurar actualizaciones transaccionales
setup_transactional_updates() {
    log "Configurando actualizaciones transaccionales..."
    cat <<EOF > "$SYSTEMD_SERVICE"
[Unit]
Description=Transactional System Update
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update run
ExecStartPost=/usr/bin/systemctl reboot
EOF

    cat <<EOF > "$SYSTEMD_TIMER"
[Unit]
Description=Run transactional updates daily

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # Crear script de actualización transaccional
    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualización transaccional")
btrfs subvolume snapshot /.snapshots/$SNAPSHOT_ID/snapshot /.snapshots/$SNAPSHOT_ID/writable
mount --bind / /.snapshots/$SNAPSHOT_ID/writable

cleanup() {
    umount /.snapshots/$SNAPSHOT_ID/writable
    snapper delete $SNAPSHOT_ID
}
trap cleanup EXIT

arch-chroot /.snapshots/$SNAPSHOT_ID/writable pacman -Syu --noconfirm
snapper create -t post --pre-number $SNAPSHOT_ID --description "Post actualización"
EOF

    chmod +x /usr/bin/transactional-update
    systemctl daemon-reload
    systemctl enable transactional-update.timer | tee -a "$LOG_FILE"
}

# Configurar entradas de arranque en SystemDBoot
setup_systemdboot() {
    log "Configurando SystemDBoot..."
    current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)
    root_partuuid=$(blkid -s PARTUUID -o value $(findmnt / -o SOURCE -n))

    cat <<EOF > "$BOOT_LOADER_ENTRIES/arch-snapshot.conf"
title Arch Linux (Snapshot)
linux /vmlinuz-$current_kernel
initrd /initramfs-$current_kernel.img
options root=PARTUUID=$root_partuuid rootflags=subvol=@.snapshots rw
EOF
}

# Configurar limpieza automática de snapshots
setup_snapshot_cleanup() {
    log "Configurando limpieza de snapshots..."
    cat <<EOF > "$SNAPSHOT_CLEANUP_SERVICE"
[Unit]
Description=Cleanup old snapper snapshots

[Service]
Type=oneshot
ExecStart=/usr/bin/snapper cleanup number
EOF

    cat <<EOF > "$SNAPSHOT_CLEANUP_TIMER"
[Unit]
Description=Weekly snapshot cleanup

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable snapper-cleanup.timer | tee -a "$LOG_FILE"
}

# Función principal
main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates
    setup_systemdboot
    setup_snapshot_cleanup

    log "${GREEN}Configuración completada con éxito!${NC}"
    log "${YELLOW}Recomendado: Reiniciar el sistema para aplicar los cambios${NC}"
}

main "$@"
#test3
