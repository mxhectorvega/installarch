#!/usr/bin/env bash
set -euo pipefail

# Configuración de colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Variables principales
LOG_FILE="/var/log/transactional-setup.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
SYSTEMD_SERVICE="/etc/systemd/system/transactional-update.service"
SYSTEMD_TIMER="/etc/systemd/system/transactional-update.timer"
HOOK_SCRIPT="/usr/local/bin/update-systemd-boot-entries"

# Función de registro mejorada
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local color

    case $level in
        "INFO") color="${BLUE}" ;;
        "ÉXITO") color="${GREEN}" ;;
        "ADVERTENCIA") color="${YELLOW}" ;;
        "ERROR") color="${RED}" ;;
        *) color="${NC}" ;;
    esac

    echo -e "${MAGENTA}[${timestamp}] ${color}${level}: ${message}${NC}" | tee -a "$LOG_FILE"
}

# Manejo de errores robusto
error_handler() {
    log "ERROR" "Fallo en línea $1: $2"
    log "ADVERTENCIA" "Iniciando recuperación..."

    # Limpiar montajes residuales
    if mountpoint -q /mnt/root; then
        umount -l /mnt/root || true
        rm -rf /mnt/root
    fi

    # Rollback de snapshot
    local last_snap=$(snapper -c root list 2>/dev/null | tail -n2 | head -n1 | awk '{print $1}')
    if [[ $last_snap =~ ^[0-9]+$ ]]; then
        log "ADVERTENCIA" "Eliminando snapshot fallido #${last_snap}"
        snapper delete $last_snap 2>/dev/null || true
    fi

    log "ERROR" "Proceso abortado. Verifique: ${LOG_FILE}"
    exit 1
}

trap 'error_handler ${LINENO} "$BASH_COMMAND"' ERR

# Verificar privilegios
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "Ejecutar como root"
        exit 1
    fi
}

# Instalar dependencias
install_dependencies() {
    log "INFO" "Verificando dependencias..."
    local dependencies=(
        snapper btrfs-progs snap-pac
        inotify-tools python-dbus python-notify2
    )

    for pkg in "${dependencies[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "INFO" "Instalando ${pkg}..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        else
            log "INFO" "${pkg} ya instalado"
        fi
    done
}

# Configuración de Snapper
configure_snapper() {
    log "INFO" "Configurando Snapper..."
    local root_dev=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//;s/ //')
    local subvol_path="@.snapshots"

    # Manejar subvolumen existente
    if btrfs subvolume list / | grep -q "path ${subvol_path}$"; then
        log "ADVERTENCIA" "Subvolumen existente detectado"

        mkdir -p /mnt/root
        log "INFO" "Montando ${root_dev}..."
        mount -t btrfs -o noatime,compress=zstd "${root_dev}" /mnt/root

        if [ -d "/mnt/root/${subvol_path}" ]; then
            log "ADVERTENCIA" "Eliminando subvolumen..."
            btrfs subvolume delete "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"
            sync
        fi

        log "INFO" "Creando nuevo subvolumen..."
        btrfs subvolume create "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"

        umount /mnt/root
        rm -rf /mnt/root
    fi

    # Eliminar configuración previa
    if snapper list-configs | grep -q "root"; then
        log "ADVERTENCIA" "Eliminando configuración antigua..."
        snapper -c root delete-config | tee -a "$LOG_FILE"
    fi

    # Nueva configuración
    log "INFO" "Creando configuración Snapper..."
    snapper -c root create-config -f btrfs / | tee -a "$LOG_FILE"

    # Ajustes
    snapper -c root set-config \
        ALLOW_USERS=root \
        TIMELINE_LIMIT_HOURLY="5" \
        TIMELINE_LIMIT_DAILY="7" | tee -a "$LOG_FILE"

    chmod 750 /.snapshots
    chown :wheel /.snapshots
    systemctl enable --now snapper-timeline.timer snapper-cleanup.timer
}

# Actualizaciones transaccionales
setup_transactional_updates() {
    log "INFO" "Configurando actualizaciones..."

    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualización automática")
LOG_FILE="/var/log/transactional-update.log"

btrfs subvolume snapshot /.snapshots/${SNAPSHOT_ID}/snapshot /.snapshots/${SNAPSHOT_ID}/writable
mount --bind / /.snapshots/${SNAPSHOT_ID}/writable

cleanup() {
    umount -l /.snapshots/${SNAPSHOT_ID}/writable
    btrfs subvolume delete /.snapshots/${SNAPSHOT_ID}/writable
    snapper delete ${SNAPSHOT_ID}
    exit 1
}
trap cleanup ERR

arch-chroot /.snapshots/${SNAPSHOT_ID}/writable pacman -Syu --noconfirm
snapper create -t post --pre-number ${SNAPSHOT_ID} --description "Post-actualización"
/usr/local/bin/update-systemd-boot-entries
EOF

    chmod +x /usr/bin/transactional-update

    # Servicio systemd
    cat <<EOF > ${SYSTEMD_SERVICE}
[Unit]
Description=Actualización Transaccional
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > ${SYSTEMD_TIMER}
[Unit]
Description=Actualizaciones Diarias

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
}

# Configurar systemd-boot
setup_systemdboot() {
    log "INFO" "Configurando systemd-boot..."

    # Instalar si no existe
    if [[ ! -f "/boot/loader/loader.conf" ]]; then
        bootctl install | tee -a "$LOG_FILE"
    fi

    # Hook de actualización
    cat <<'EOF' > ${HOOK_SCRIPT}
#!/bin/bash
set -euo pipefail

root_partuuid=$(blkid -s PARTUUID -o value $(findmnt / -o SOURCE -n))
current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)

find "${BOOT_LOADER_ENTRIES}" -name "arch-snapshot-*.conf" -delete

snapper -c root list | awk '/pre|post/ {print $1}' | while read snapshot_id; do
    snapshot_desc=$(snapper -c root info $snapshot_id | grep "Description" | cut -d':' -f2 | sed 's/^ *//;s/ *$//')
    cat <<CONF > "${BOOT_LOADER_ENTRIES}/arch-snapshot-${snapshot_id}.conf"
title Arch Linux (Snapshot #${snapshot_id}) - ${snapshot_desc}
linux /vmlinuz-${current_kernel}
initrd /initramfs-${current_kernel}.img
options root=PARTUUID=${root_partuuid} rootflags=subvol=@.snapshots/${snapshot_id}/snapshot rw
CONF
done

bootctl update
EOF

    chmod +x ${HOOK_SCRIPT}
    echo "POST_CREATE_SNAPSHOT=\"${HOOK_SCRIPT}\"" >> /etc/snapper/configs/root
    ${HOOK_SCRIPT}

    # Entrada principal
    local root_partuuid=$(blkid -s PARTUUID -o value $(findmnt / -o SOURCE -n))
    local current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)

    cat <<EOF > "${BOOT_LOADER_ENTRIES}/arch.conf"
title Arch Linux (Actual)
linux /vmlinuz-${current_kernel}
initrd /initramfs-${current_kernel}.img
options root=PARTUUID=${root_partuuid} rootflags=subvol=@ rw
EOF

    log "ÉXITO" "Systemd-boot configurado"
}

# Limpieza automática
setup_cleanup() {
    log "INFO" "Configurando limpieza..."

    cat <<EOF > /etc/systemd/system/snapper-cleanup.service
[Unit]
Description=Limpieza de Snapshots

[Service]
Type=oneshot
ExecStart=/usr/bin/sh -c 'snapper cleanup number && snapper cleanup timeline'
EOF

    cat <<EOF > /etc/systemd/system/snapper-cleanup.timer
[Unit]
Description=Limpieza Semanal

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now snapper-cleanup.timer
}

# Función principal
main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates
    setup_systemdboot
    setup_cleanup

    log "ÉXITO" "Configuración completada!"
    log "INFO" "Recomendaciones:"
    log "INFO" "1. Verifique entradas en ${BOOT_LOADER_ENTRIES}"
    log "INFO" "2. Revise timers: systemctl list-timers"
    log "ADVERTENCIA" "Reinicie para aplicar cambios"
}

main "$@"
#update17
