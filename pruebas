#!/bin/bash

# ========================================================================================
# üåê Script de Actualizaciones Transaccionales para Arch Linux
# ========================================================================================
# üìù Descripci√≥n:
# Este script configura un sistema de actualizaciones transaccionales en Arch Linux,
# utilizando Btrfs, Snapper y SystemD-Boot. Automatiza la creaci√≥n y gesti√≥n de snapshots,
# integra las entradas en el bootloader y configura servicios y timers para la automatizaci√≥n.
# ========================================================================================

# -----------------------------------------
# üé® Colores para los mensajes
# -----------------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Sin color

echo -e "${GREEN}Iniciando el script de configuraci√≥n...${NC}"

# -----------------------------------------
# üõ† Funciones de utilidad
# -----------------------------------------

# Funci√≥n para mostrar mensajes de informaci√≥n
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Funci√≥n para mostrar mensajes de advertencia
warning() {
    echo -e "${YELLOW}[ADVERTENCIA]${NC} $1"
}

# Funci√≥n para mostrar mensajes de error
error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# -----------------------------------------
# üöÄ Verificaci√≥n de permisos
# -----------------------------------------
if [ "$EUID" -ne 0 ]; then
    error "Este script debe ejecutarse como root."
fi

# -----------------------------------------
# üì¶ Instalaci√≥n de dependencias necesarias
# -----------------------------------------
info "Instalando dependencias necesarias..."

DEPENDENCIAS=(
    btrfs-progs
    snapper
    snap-pac
    systemd-boot
    grub-btrfs
    systemd-boot-pacman-hook
)

for pkg in "${DEPENDENCIAS[@]}"; do
    if ! pacman -Qi $pkg &>/dev/null; then
        info "Instalando $pkg..."
        pacman -S --noconfirm $pkg || error "No se pudo instalar $pkg."
    else
        info "$pkg ya est√° instalado."
    fi
done

# -----------------------------------------
# üóÑ Configuraci√≥n de subvol√∫menes Btrfs
# -----------------------------------------
info "Configurando subvol√∫menes Btrfs..."

ROOT_MOUNTPOINT="/"
BTRFS_DEVICE=$(findmnt -no SOURCE --target $ROOT_MOUNTPOINT)

if [ -z "$BTRFS_DEVICE" ]; then
    error "No se pudo determinar el dispositivo Btrfs."
fi

SUBVOLUMENES=(
    "@"
    "@.snapshots"
    "@home"
    "@log"
    "@pkgs"
)

for subvol in "${SUBVOLUMENES[@]}"; do
    if ! btrfs subvolume list / | grep -q "$subvol"; then
        info "Creando subvolumen $subvol..."
        btrfs subvolume create /$subvol || error "No se pudo crear el subvolumen $subvol."
    else
        info "El subvolumen $subvol ya existe."
    fi
done

# -----------------------------------------
# üìù Configuraci√≥n de Snapper
# -----------------------------------------
info "Configurando Snapper..."

snapper -c root create-config / || warning "La configuraci√≥n de Snapper ya existe."
chmod a+rx /.snapshots
chown :users /.snapshots

# -----------------------------------------
# üîÑ Creaci√≥n del script de actualizaci√≥n transaccional
# -----------------------------------------
info "Creando el script de actualizaci√≥n transaccional..."

cat << 'EOF' > /usr/local/bin/transactional-update
#!/bin/bash

# -----------------------------------------
# üåê Actualizaci√≥n Transaccional
# -----------------------------------------

# Colores
GREEN='\033[0;32m'
NC='\033[0m' # Sin color

echo -e "${GREEN}Iniciando actualizaci√≥n transaccional...${NC}"

# Crear snapshot
SNAPSHOT_NUM=$(snapper -c root create --description "Actualizaci√≥n del sistema" | awk '/created snapshot/ {print $3}')

# Montar snapshot
MOUNT_POINT="/mnt/snapshot"
mkdir -p $MOUNT_POINT
mount -o subvol=.snapshots/$SNAPSHOT_NUM/snapshot / $MOUNT_POINT

# Actualizar el sistema en el snapshot
arch-chroot $MOUNT_POINT pacman -Syu --noconfirm

# Generar nuevas entradas del bootloader
bootctl update

# Desmontar y limpiar
umount $MOUNT_POINT
rmdir $MOUNT_POINT

echo -e "${GREEN}Actualizaci√≥n transaccional completada. Puedes reiniciar y seleccionar el nuevo snapshot.${NC}"
EOF

chmod +x /usr/local/bin/transactional-update

# -----------------------------------------
# ‚è≤ Configuraci√≥n de servicios y timers
# -----------------------------------------
info "Configurando servicios y timers..."

# Servicio systemd
cat << 'EOF' > /etc/systemd/system/transactional-update.service
[Unit]
Description=Actualizaci√≥n Transaccional del Sistema
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/transactional-update
EOF

# Timer systemd
cat << 'EOF' > /etc/systemd/system/transactional-update.timer
[Unit]
Description=Timer para Actualizaci√≥n Transaccional

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

# Habilitar y iniciar el timer
systemctl enable --now transactional-update.timer

# -----------------------------------------
# üìù Configuraci√≥n del registro de errores
# -----------------------------------------
info "Configurando el sistema de registro de errores..."

LOG_FILE="/var/log/transactional-update.log"
touch $LOG_FILE
chmod 644 $LOG_FILE

# Modificar el script para registrar errores
sed -i '1i exec 2>>'"$LOG_FILE" /usr/local/bin/transactional-update

# -----------------------------------------
# ‚ôªÔ∏è Sistema de mantenimiento de snapshots
# -----------------------------------------
info "Configurando el mantenimiento de snapshots..."

# Configuraci√≥n en /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_CREATE=.*\)/TIMELINE_CREATE="yes"/' /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_CLEANUP=.*\)/TIMELINE_CLEANUP="yes"/' /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_LIMIT_DAILY=.*\)/TIMELINE_LIMIT_DAILY="7"/' /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_LIMIT_WEEKLY=.*\)/TIMELINE_LIMIT_WEEKLY="0"/' /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_LIMIT_MONTHLY=.*\)/TIMELINE_LIMIT_MONTHLY="0"/' /etc/snapper/configs/root
sed -i 's/^\(#\)\?\(TIMELINE_LIMIT_YEARLY=.*\)/TIMELINE_LIMIT_YEARLY="0"/' /etc/snapper/configs/root

# -----------------------------------------
# üîÑ Sistema de retroceso (Rollback)
# -----------------------------------------
info "Configurando el sistema de retroceso..."

# Asumiendo que SystemD-Boot detecta autom√°ticamente los snapshots creados por Snapper
bootctl update

# -----------------------------------------
# ‚úÖ Finalizaci√≥n
# -----------------------------------------
echo -e "${GREEN}Configuraci√≥n completada con √©xito. El sistema ahora soporta actualizaciones transaccionales.${NC}"
echo -e "${GREEN}Puedes ver los logs en $LOG_FILE si necesitas revisar alg√∫n error.${NC}"
#loco1
