#!/usr/bin/env bash

# Strict mode
set -euo pipefail

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

# Global variables
readonly LOG_FILE="$HOME/arch_install.log"
readonly TEMP_PASSWORD_FILE="/tmp/.arch_install_pwd"
declare -A INSTALLED_PACKAGES=()

# Clean up function
cleanup() {
    rm -f "$TEMP_PASSWORD_FILE"
    if [[ ${#INSTALLED_PACKAGES[@]} -gt 0 && $? -ne 0 ]]; then
        echo -e "${RED}Installation failed. Rolling back...${NC}"
        for pkg in "${!INSTALLED_PACKAGES[@]}"; do
            sudo pacman -R --noconfirm "$pkg"
        done
    fi
}

trap cleanup EXIT

# Logger function
log() {
    local message="$1"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "$timestamp: $message" | tee -a "$LOG_FILE"
}

# Password dialog function
get_password() {
    local prompt="$1"
    local password

    # Create custom password prompt
    echo -e "${BLUE}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${BLUE}‚îÇ${NC} $prompt"
    echo -e "${BLUE}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"

    read -rs password
    echo "$password"
}

# Check and install dependencies
check_dependencies() {
    local deps=("curl" "git" "base-devel")

    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log "Installing dependency: $dep"
            sudo pacman -S --noconfirm "$dep"
            INSTALLED_PACKAGES["$dep"]=1
        fi
    done
}

# Progress bar function
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((percentage * width / 100))
    local empty=$((width - filled))

    printf "\r${CYAN}[%-${width}s] %d%%${NC}" "$(printf '#%.0s' $(seq 1 "$filled"))$(printf ' %.0s' $(seq 1 "$empty"))" "$percentage"
}

# Welcome screen
show_welcome() {
    clear
    echo -e "${GREEN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${GREEN}‚îÇ     Bienvenido al instalador de          ‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ        scripts de mxhectorvega           ‚îÇ${NC}"
    echo -e "${GREEN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    echo -e "\nArchivo de registros: ${BLUE}$LOG_FILE${NC}\n"
    sleep 2
}

# Script selection menu
select_script() {
    local scripts=(
        "Optimizaciones para Pacman, Repo Chaotic y Paru - AUR Helper"
        "Software flatpak para el usuario dom√©stico"
        "Entorno de escritorio Gnome 47.x"
        "Controladores Wifi para MacBook Pro y Air"
        "Controladores para impresora Epson L3210"
        "Configuraciones para Hyprland"
    )

    local urls=(
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/repos"
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/flatpak"
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/gnome"
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/macbook"
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/impresora"
        "https://raw.githubusercontent.com/mxhectorvega/installarch/main/hyprland"
    )

    echo -e "${YELLOW}Seleccione un script para instalar:${NC}\n"

    for i in "${!scripts[@]}"; do
        echo -e "${CYAN}$((i+1))${NC}) ${scripts[$i]}"
    done

    local selection
    read -rp $'\nIngrese el n√∫mero de su selecci√≥n: ' selection

    if [[ "$selection" =~ ^[1-6]$ ]]; then
        echo "${urls[$((selection-1))]}"
    else
        echo ""
    fi
}

# Execute selected script
execute_script() {
    local url="$1"
    local temp_script
    temp_script=$(mktemp)

    curl -s "$url" > "$temp_script"
    chmod +x "$temp_script"

    echo -e "\n${YELLOW}Ejecutando script...${NC}\n"

    # Execute as non-root user when needed
    if grep -q "git clone\|makepkg" "$temp_script"; then
        sudo -u "$SUDO_USER" "$temp_script"
    else
        "$temp_script"
    fi

    rm -f "$temp_script"
}

# Show final screen
show_final_screen() {
    local status=$1

    clear
    if [ "$status" -eq 0 ]; then
        echo -e "${GREEN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
        echo -e "${GREEN}‚îÇ      ¬°Instalaci√≥n completada con √©xito!  ‚îÇ${NC}"
        echo -e "${GREEN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    else
        echo -e "${RED}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
        echo -e "${RED}‚îÇ   ¬°Error durante la instalaci√≥n!         ‚îÇ${NC}"
        echo -e "${RED}‚îÇ   Revise el archivo de registros         ‚îÇ${NC}"
        echo -e "${RED}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    fi

    echo -e "\n${PURPLE}‚ô•Ô∏è Suscr√≠bete! üåê https://www.youtube.com/mxhectorvega${NC}\n"

    # Show logs in scrollable view
    echo -e "${YELLOW}Presione q para salir del registro${NC}"
    less "$LOG_FILE"
}

# Main function
main() {
    # Initialize log file
    : > "$LOG_FILE"

    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        echo "Este script debe ejecutarse como root"
        exit 1
    fi

    # Store current user
    SUDO_USER=${SUDO_USER:-$(logname)}

    # Show welcome screen
    show_welcome

    # Check dependencies
    check_dependencies

    # Get script selection
    local selected_url
    selected_url=$(select_script)

    if [[ -n "$selected_url" ]]; then
        # Execute selected script
        if execute_script "$selected_url"; then
            show_final_screen 0
        else
            show_final_screen 1
        fi
    else
        echo -e "${RED}Selecci√≥n inv√°lida${NC}"
        exit 1
    fi
}

# Execute main function
main "$@"
#321
