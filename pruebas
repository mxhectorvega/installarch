#!/bin/sh

# Variables globales
REPO_URL="https://github.com/mxhectorvega/installarch"
REPO_DIR="$HOME/installarch"
LOG_FILE="$HOME/installarch_install.log"
ROOT_PASS_FILE="$HOME/.root_pass"
USER_PASS_FILE="$HOME/.user_pass"

# Funci칩n para registrar eventos
log_event() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Limpiar instalaciones previas
clean_previous_install() {
    rm -rf "$REPO_DIR"
    rm -f "$LOG_FILE"
    log_event "Instalaci칩n previa eliminada"
}

# Clonar repositorio
clone_repository() {
    git clone "$REPO_URL" "$REPO_DIR" 2>> "$LOG_FILE"
    if [ $? -ne 0 ]; then
        whiptail --title "Error" --msgbox "Error al clonar el repositorio. Revisa el archivo de registros en $LOG_FILE" 10 60
        exit 1
    fi
    log_event "Repositorio clonado exitosamente"
}

# Obtener contrase침as
get_passwords() {
    ROOT_PASS=$(whiptail --passwordbox "Introduce la contrase침a de root:" 8 60 --title "Contrase침a root" 3>&1 1>&2 2>&3)
    echo "$ROOT_PASS" > "$ROOT_PASS_FILE"

    USER_PASS=$(whiptail --passwordbox "Introduce la contrase침a del usuario:" 8 60 --title "Contrase침a usuario" 3>&1 1>&2 2>&3)
    echo "$USER_PASS" > "$USER_PASS_FILE"

    log_event "Contrase침as almacenadas para uso futuro"
}

# Listar scripts disponibles
list_scripts() {
    SCRIPT_FILES=$(find "$REPO_DIR" -type f -executable ! -name "*.*" | sort)
    if [ -z "$SCRIPT_FILES" ]; then
        whiptail --title "Error" --msgbox "No se encontraron scripts ejecutables en el repositorio." 8 60
        exit 1
    fi

    MENU_OPTIONS=""
    INDEX=1
    for SCRIPT in $SCRIPT_FILES; do
        SCRIPT_NAME=$(basename "$SCRIPT")
        MENU_OPTIONS="$MENU_OPTIONS $INDEX \"$SCRIPT_NAME\""
        INDEX=$((INDEX+1))
    done

    SELECTED_INDEX=$(eval "whiptail --title \"Lista de scripts\" --menu \"Selecciona un script para ejecutar:\" 20 60 10 $MENU_OPTIONS 3>&1 1>&2 2>&3")

    if [ -z "$SELECTED_INDEX" ]; then
        main_menu
    else
        SELECTED_SCRIPT=$(echo "$SCRIPT_FILES" | sed -n "${SELECTED_INDEX}p")
        execute_script "$SELECTED_SCRIPT"
    fi
}

# Ejecutar script seleccionado
execute_script() {
    SCRIPT_PATH="$1"
    TOTAL_STEPS=10  # Suponiendo 10 pasos en el script
    STEP=0

    while [ $STEP -le $TOTAL_STEPS ]; do
        PERCENT=$(( STEP * 100 / TOTAL_STEPS ))
        echo $PERCENT

        if [ $STEP -eq 3 ]; then
            # Simular solicitud de contrase침a
            sleep 1
        fi

        sleep 0.5
        STEP=$((STEP+1))
    done | whiptail --gauge "Instalando $SCRIPT_PATH..." 6 60 0

    # Ejecutar el script como usuario adecuado
    if [ "$(id -u)" -eq 0 ]; then
        su "$(logname)" -c "$SCRIPT_PATH"
    else
        sh "$SCRIPT_PATH"
    fi

    if [ $? -ne 0 ]; then
        whiptail --title "Error" --msgbox "La instalaci칩n fall칩. Revisa el archivo de registros en $LOG_FILE" 10 60
        log_event "Error al ejecutar $SCRIPT_PATH"
        exit 1
    fi

    log_event "Script $SCRIPT_PATH ejecutado correctamente"
}

# Pantalla de bienvenida
welcome_screen() {
    if whiptail --title "Bienvenido" --yesno "Bienvenido al instalador de scripts de mxhectorvega.\nEl archivo de registros se almacenar치 en:\n$LOG_FILE" 10 60; then
        main_menu
    else
        exit 0
    fi
}

# Men칰 principal
main_menu() {
    OPTION=$(whiptail --title "Men칰 Principal" --menu "Elige una opci칩n:" 15 60 4 \
        "1" "Listar y ejecutar scripts" \
        "2" "Salir" 3>&1 1>&2 2>&3)

    case $OPTION in
        1)
            list_scripts
            ;;
        2)
            exit 0
            ;;
        *)
            exit 0
            ;;
    esac
}

# Pantalla final
final_screen() {
    CHOICE=$(whiptail --title "Instalaci칩n completa" --menu "鮫봺잺 Suscr칤bete! 游깷 https://www.youtube.com/mxhectorvega" 10 60 2 \
        "1" "Finalizar" \
        "2" "Mostrar .log" 3>&1 1>&2 2>&3)

    case $CHOICE in
        1)
            exit 0
            ;;
        2)
            whiptail --title "Registro de instalaci칩n" --textbox "$LOG_FILE" 20 60
            ;;
        *)
            exit 0
            ;;
    esac
}

# Validar dependencias
validate_dependencies() {
    DEPENDENCIES="whiptail git awk grep find"

    for DEP in $DEPENDENCIES; do
        if ! command -v "$DEP" >/dev/null 2>&1; then
            whiptail --title "Dependencia faltante" --msgbox "La dependencia \"$DEP\" no est치 instalada. Instalando..." 8 60
            pacman -Sy --noconfirm "$DEP"
            if [ $? -ne 0 ]; then
                whiptail --title "Error" --msgbox "No se pudo instalar la dependencia $DEP." 8 60
                exit 1
            fi
            log_event "Dependencia $DEP instalada"
        fi
    done
}

# Limpiar residuos
cleanup() {
    rm -f "$ROOT_PASS_FILE" "$USER_PASS_FILE"
    log_event "Archivos temporales eliminados"
}

# Manejo de se침ales y errores
error_handler() {
    whiptail --title "Error" --msgbox "Ocurri칩 un error. Revisa el archivo de registros en $LOG_FILE" 8 60
    log_event "Error inesperado"
    exit 1
}

trap error_handler ERR

# Programa principal
main() {
    validate_dependencies
    clean_previous_install
    welcome_screen
    get_passwords
    clone_repository
    final_screen
    cleanup
}

main
