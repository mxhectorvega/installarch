#!/usr/bin/env bash

# Configuración
readonly AUR_HELPER="yay"  # Cambiar por paru si se prefiere
readonly LOG_FILE="${HOME}/driver-installer.log"
declare -a REQUIRED_DEPS=("dmidecode" "lshw" "pciutils" "usbutils" "sudo")

# Colores (ANSI)
readonly COLOR_VERDE='\033[0;32m'
readonly COLOR_ROJO='\033[0;31m'
readonly COLOR_AMARILLO='\033[1;33m'
readonly COLOR_RESET='\033[0m'

# Inicialización de arrays
declare -gA DRIVERS=(
    ["oficial"]=""
    ["aur"]=""
)
declare -gA DEPENDENCIAS=(
    ["oficial"]=""
    ["aur"]=""
)

# Registro de logs mejorado
registrar_log() {
    local mensaje="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ${mensaje}" | tee -a "${LOG_FILE}" >/dev/null
}

# Función de salida controlada
salir() {
    local codigo=$1
    shift
    echo -e "${COLOR_ROJO}$*${COLOR_RESET}" | tee -a "${LOG_FILE}"
    exit "${codigo}"
}

# Verificar e instalar dependencias básicas
instalar_dependencias_basicas() {
    local -a faltantes=()
    for dep in "${REQUIRED_DEPS[@]}"; do
        pacman -Qq "${dep}" &>/dev/null || faltantes+=("${dep}")
    done

    if [[ ${#faltantes[@]} -gt 0 ]]; then
        echo -e "${COLOR_AMARILLO}Instalando dependencias: ${faltantes[*]}${COLOR_RESET}"
        sudo pacman -Sy --noconfirm --needed "${faltantes[@]}" || salir 1 "Error instalando dependencias"
    fi
}

# Escaneo de hardware profesional
escanear_hardware() {
    local -g SYS_VENDOR SYS_PRODUCT PCI_INFO
    registrar_log "Iniciando escaneo de hardware"

    SYS_VENDOR=$(sudo dmidecode -s system-manufacturer 2>/dev/null | tr -d '\n')
    SYS_PRODUCT=$(sudo dmidecode -s system-product-name 2>/dev/null | tr -d '\n')
    PCI_INFO=$(lspci -vnn)
    USB_INFO=$(lsusb)

    # Detección de MacBook
    if [[ "${SYS_VENDOR,,}" == *"apple"* ]]; then
        registrar_log "Detección de hardware Apple"
        DRIVERS["aur"]+="broadcom-wl-dkms b43-firmware apple-bce-dkms "
    fi
}

# Detección precisa de drivers
detectar_drivers() {
    registrar_log "Analizando componentes hardware"

    # Gráficos
    if grep -qi "VGA compatible controller: Intel" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="xf86-video-intel vulkan-intel libva-intel-driver intel-media-driver "
    elif grep -qi "VGA compatible controller: AMD" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="xf86-video-amdgpu vulkan-radeon libva-mesa-driver mesa-vdpau "
    elif grep -qi "VGA compatible controller: NVIDIA" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="nvidia-dkms nvidia-utils libva-vdpau-driver "
    fi

    # Redes
    if grep -qi "Network controller" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="iwd wpa_supplicant linux-firmware "
        DRIVERS["aur"]+="rtw89-dkms rtl88xxau-aircrack-dkms "
    fi

    # Audio
    if grep -qi "Audio device" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="alsa-firmware alsa-utils pulseaudio pulseaudio-alsa "
    fi

    # Optimización Wayland
    DRIVERS["oficial"]+="mesa libva-mesa-driver vulkan-icd-loader "
}

# Gestión de dependencias
verificar_dependencias() {
    registrar_log "Verificando paquetes necesarios"

    for categoria in "oficial" "aur"; do
        for pkg in ${DRIVERS[$categoria]}; do
            if ! pacman -Qq "${pkg}" &>/dev/null; then
                DEPENDENCIAS[$categoria]+="${pkg} "
            fi
        done
    done
}

# Instalación profesional
instalar_paquetes() {
    local categoria=$1
    local lista_paquetes=$2

    case $categoria in
        "oficial")
            echo -e "${COLOR_VERDE}Instalando desde repositorios oficiales...${COLOR_RESET}"
            sudo pacman -Sy --noconfirm --needed ${lista_paquetes} || return 1
            ;;
        "aur")
            if command -v "${AUR_HELPER}" &>/dev/null; then
                echo -e "${COLOR_VERDE}Instalando desde AUR...${COLOR_RESET}"
                "${AUR_HELPER}" -Sy --noconfirm --needed ${lista_paquetes} || return 1
            else
                echo -e "${COLOR_AMARILLO}Instale ${AUR_HELPER} para paquetes AUR${COLOR_RESET}"
                return 2
            fi
            ;;
    esac
}

# Configuraciones avanzadas
configurar_sistema() {
    registrar_log "Aplicando optimizaciones"

    # Configuración VAAPI
    local va_conf="/etc/environment"
    sudo tee -a "${va_conf}" >/dev/null << EOF
LIBVA_DRIVER_NAME=${LIBVA_DRIVER:-radeonsi}
VDPAU_DRIVER=${VDPAU_DRIVER:-radeonsi}
EOF

    # Configuración DRM
    echo "options drm modeset=1" | sudo tee /etc/modprobe.d/modesetting.conf >/dev/null
}

# Mostrar resumen profesional
mostrar_resumen() {
    local total=0
    echo -e "\n${COLOR_VERDE}=== RESUMEN DE INSTALACIÓN ==="
    echo -e "Sistema: ${SYS_VENDOR} ${SYS_PRODUCT}"

    for categoria in "oficial" "aur"; do
        count=$(wc -w <<< "${DEPENDENCIAS[$categoria]}")
        total=$((total + count))
        echo -e "\n${COLOR_AMARILLO}${categoria^^}: ${count} paquetes${COLOR_VERDE}"
        tr ' ' '\n' <<< "${DEPENDENCIAS[$categoria]}" | sed 's/^/• /'
    done

    echo -e "\nTotal paquetes instalados: ${total}${COLOR_RESET}"
}

# Main controlado
main() {
    trap 'salir 1 "Interrupción detectada"' SIGINT
    set -eo pipefail

    instalar_dependencias_basicas
    escanear_hardware
    detectar_drivers
    verificar_dependencias

    if [[ -z "${DEPENDENCIAS[oficial]}${DEPENDENCIAS[aur]}" ]]; then
        echo -e "${COLOR_VERDE}El sistema ya tiene todos los drivers necesarios.${COLOR_RESET}"
        exit 0
    fi

    mostrar_resumen

    read -rp $'\n'"${COLOR_AMARILLO}¿Desea continuar con la instalación? [s/N]: ${COLOR_RESET}" respuesta
    [[ "${respuesta,,}" != "s" ]] && salir 0 "Instalación cancelada"

    for categoria in "oficial" "aur"; do
        [[ -n "${DEPENDENCIAS[$categoria]}" ]] && instalar_paquetes "${categoria}" "${DEPENDENCIAS[$categoria]}"
    done

    configurar_sistema
    registrar_log "Instalación completada exitosamente"
    echo -e "\n${COLOR_VERDE}¡Proceso completado con éxito!${COLOR_RESET}"
}

# Ejecución principal
main "$@"
