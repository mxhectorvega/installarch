#!/bin/sh

# Variables globales
INSTALL_DIR="$HOME/installarch"
LOG_FILE="$HOME/installarch.log"
REPO_URL="https://github.com/mxhectorvega/installarch.git"
TEMP_DIR=$(mktemp -d)
ROOT_PASSWORD=""
NON_PRIV_USER=$(whoami)

# Función para limpiar residuos
cleanup() {
    echo "Limpiando residuos temporales..."
    rm -rf "$TEMP_DIR"
}

# Función para registrar mensajes
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Función para manejar errores
handle_error() {
    log_message "ERROR: $1"
    echo "Error: $1"
    cleanup
    exit 1
}

# Pantalla de Bienvenida
welcome_screen() {
    clear
    echo "Bienvenido al instalador de scripts de mxhectorvega"
    echo "--------------------------------------------------"
    echo "El archivo de registros se almacenará en: $LOG_FILE"
    echo ""
    echo "Dependencias necesarias: git, awk, grep, column"
    echo ""

    # Verificar dependencias
    for dep in git awk grep column; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            echo "Instalando dependencia: $dep"
            sudo pacman -Sy --noconfirm "$dep" || handle_error "No se pudo instalar $dep"
        fi
    done

    echo ""
    echo "1. Iniciar"
    echo "2. Cancelar"
    read -r choice
    case "$choice" in
        1) ;;
        2) cleanup && exit 0 ;;
        *) handle_error "Opción inválida" ;;
    esac
}

# Clonar repositorio
clone_repo() {
    log_message "Clonando repositorio desde $REPO_URL"
    if ! git clone "$REPO_URL" "$INSTALL_DIR"; then
        handle_error "No se pudo clonar el repositorio"
    fi
}

# Pantalla de Lista de Scripts
list_scripts_screen() {
    clear
    echo "Lista de scripts disponibles:"
    echo "-----------------------------"

    # Encontrar scripts ejecutables sin extensión
    find "$INSTALL_DIR" -maxdepth 1 -type f -executable | awk -F/ '{print $NF}' | grep -v '\.' > "$TEMP_DIR/scripts.txt"
    cat -n "$TEMP_DIR/scripts.txt" | column -t

    echo ""
    echo "Seleccione un número para ejecutar el script:"
    read -r script_num

    # Validar selección
    selected_script=$(sed -n "${script_num}p" "$TEMP_DIR/scripts.txt")
    if [ -z "$selected_script" ]; then
        handle_error "Selección inválida"
    fi

    echo "Script seleccionado: $selected_script"
    echo ""
    echo "1. Siguiente"
    echo "2. Atrás"
    echo "3. Cancelar"
    read -r choice
    case "$choice" in
        1) install_screen "$selected_script" ;;
        2) list_scripts_screen ;;
        3) cleanup && exit 0 ;;
        *) handle_error "Opción inválida" ;;
    esac
}

# Pantalla de Instalación
install_screen() {
    script_name="$1"
    script_path="$INSTALL_DIR/$script_name"
    total_steps=$(grep -c '^#' "$script_path") # Contar pasos basados en comentarios
    current_step=0

    clear
    echo "Instalando script: $script_name"
    echo "Progreso: [$(printf "%-${total_steps}s" | tr ' ' '=')]"

    # Ejecutar script paso a paso
    while IFS= read -r line; do
        if echo "$line" | grep -q '^#'; then
            current_step=$((current_step + 1))
            progress=$(printf "%-${current_step}s" | tr ' ' '=')
            echo -ne "\rProgreso: [$progress]"
        else
            eval "$line" || handle_error "Error al ejecutar línea: $line"
        fi
    done < "$script_path"

    echo ""
    echo "Instalación completada."
    echo ""
    echo "1. Siguiente"
    echo "2. Atrás"
    echo "3. Cancelar"
    read -r choice
    case "$choice" in
        1) final_screen ;;
        2) list_scripts_screen ;;
        3) cleanup && exit 0 ;;
        *) handle_error "Opción inválida" ;;
    esac
}

# Pantalla Final
final_screen() {
    clear
    echo "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega"
    echo ""
    echo "1. Finalizar"
    echo "2. Mostrar .log"
    read -r choice
    case "$choice" in
        1) cleanup && exit 0 ;;
        2) less "$LOG_FILE" ;;
        *) handle_error "Opción inválida" ;;
    esac
}

# Función principal
main() {
    trap cleanup EXIT
    welcome_screen
    clone_repo
    list_scripts_screen
}

# Ejecutar script
main
