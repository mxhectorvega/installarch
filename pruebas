#!/usr/bin/env bash
set -euo pipefail

# Configuraci√≥n de colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # Sin color

# Variables de entorno y rutas
LOG_FILE="/var/log/transactional-update.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
SYSTEMD_SERVICE="/etc/systemd/system/transactional-update.service"
SYSTEMD_TIMER="/etc/systemd/system/transactional-update.timer"
SNAPSHOT_CLEANUP_SERVICE="/etc/systemd/system/snapper-cleanup.service"
SNAPSHOT_CLEANUP_TIMER="/etc/systemd/system/snapper-cleanup.timer"

# Funci√≥n para registro de eventos
log() {
    local message="$1"
    echo -e "${MAGENTA}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}" | tee -a "$LOG_FILE"
}

# Funci√≥n de manejo de errores mejorada
error_handler() {
    local line="$1"
    local cmd="$2"
    log "${RED}‚úó Error cr√≠tico en l√≠nea ${line}: ${cmd}${NC}"
    log "${YELLOW}‚ö†Ô∏è  Iniciando proceso de recuperaci√≥n...${NC}"

    # Intentar eliminar montajes residuales
    if mountpoint -q /mnt/root; then
        umount -l /mnt/root || true
        rm -rf /mnt/root
    fi

    # Rollback de snapshots
    local last_snap=$(snapper -c root list 2>/dev/null | tail -n2 | head -n1 | awk '{print $1}')
    if [[ $last_snap =~ ^[0-9]+$ ]]; then
        log "${YELLOW}‚Ü©Ô∏è  Eliminando snapshot fallido #${last_snap}...${NC}"
        snapper delete $last_snap 2>/dev/null || true
    fi

    log "${YELLOW}üîÑ Sistema estabilizado. Verifique el log: ${LOG_FILE}${NC}"
    exit 1
}

trap 'error_handler ${LINENO} "$BASH_COMMAND"' ERR

# Verificar si se ejecuta como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}‚ùå Este script debe ejecutarse como root${NC}" >&2
        exit 1
    fi
}

# Instalaci√≥n inteligente de dependencias
install_dependencies() {
    log "${BLUE}üîç Verificando dependencias...${NC}"
    local dependencies=(
        snapper
        grub-btrfs
        snap-pac
        python-dbus
        python-notify2
        inotify-tools
        btrfs-progs
    )

    for pkg in "${dependencies[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "Instalando ${CYAN}${pkg}${NC}..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        else
            log "‚úì ${GREEN}${pkg}${NC} ya est√° instalado"
        fi
    done
}

# Configuraci√≥n robusta de Snapper
configure_snapper() {
    log "${BLUE}üõ†Ô∏è  Configurando Snapper...${NC}"

    # Obtener dispositivo ra√≠z limpio
    local root_dev=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//;s/^ //')
    local subvol_path="@.snapshots"

    # Verificar y manejar subvolumen existente
    if btrfs subvolume list / | grep -q "path ${subvol_path}$"; then
        log "${YELLOW}‚ö†Ô∏è  Subvolumen .snapshots existente detectado...${NC}"

        # Montar dispositivo ra√≠z
        mkdir -p /mnt/root
        log "Montando ${root_dev} en /mnt/root..."
        mount -t btrfs -o noatime,compress=zstd,space_cache=v2 "${root_dev}" /mnt/root

        # Eliminar subvolumen existente de forma segura
        if [ -d "/mnt/root/${subvol_path}" ]; then
            log "${YELLOW}üóëÔ∏è  Eliminando subvolumen conflictivo...${NC}"
            btrfs subvolume delete "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"
            sync
            sleep 2
        fi

        # Crear nuevo subvolumen
        log "${BLUE}üÜï Creando subvolumen limpio...${NC}"
        btrfs subvolume create "/mnt/root/${subvol_path}" | tee -a "$LOG_FILE"

        # Desmontar y limpiar
        umount /mnt/root
        rm -rf /mnt/root
    fi

    # Configurar Snapper si no existe
    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        log "${BLUE}üìù Generando configuraci√≥n de Snapper...${NC}"
        snapper -c root create-config -f btrfs subvolume "/.snapshots" / | tee -a "$LOG_FILE"

        # Optimizar configuraci√≥n
        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY="5" \
            TIMELINE_LIMIT_DAILY="7" \
            TIMELINE_LIMIT_WEEKLY="0" \
            TIMELINE_LIMIT_MONTHLY="0" | tee -a "$LOG_FILE"

        # Ajustar permisos
        chmod 750 /.snapshots
        chown :wheel /.snapshots

        # Sincronizar cambios
        btrfs filesystem sync /

        # Habilitar servicios
        systemctl enable --now snapper-timeline.timer snapper-cleanup.timer | tee -a "$LOG_FILE"
        log "${GREEN}‚úÖ Servicios de Snapper activados${NC}"
    fi
}

# Sistema de actualizaciones transaccionales
setup_transactional_updates() {
    log "${BLUE}‚öôÔ∏è  Configurando actualizaciones transaccionales...${NC}"

    # Crear script de actualizaci√≥n
    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

# Generar ID de snapshot
SNAPSHOT_ID=$(snapper create -t pre --print-number --description "[AUTO] Pre-actualizaci√≥n")
LOG_FILE="/var/log/transactional-update.log"

# Registrar inicio
echo -e "\n[$(date '+%Y-%m-%d %H:%M:%S')] Iniciando actualizaci√≥n transaccional (#${SNAPSHOT_ID})" >> $LOG_FILE

# Crear entorno de actualizaci√≥n
btrfs subvolume snapshot /.snapshots/${SNAPSHOT_ID}/snapshot /.snapshots/${SNAPSHOT_ID}/writable
mount --bind / /.snapshots/${SNAPSHOT_ID}/writable

# Funci√≥n de limpieza
cleanup() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Iniciando limpieza..." >> $LOG_FILE
    umount -l /.snapshots/${SNAPSHOT_ID}/writable 2>/dev/null || true
    btrfs subvolume delete /.snapshots/${SNAPSHOT_ID}/writable 2>>$LOG_FILE
    snapper delete ${SNAPSHOT_ID} 2>>$LOG_FILE
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Limpieza completada" >> $LOG_FILE
}
trap cleanup EXIT

# Ejecutar actualizaci√≥n
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Actualizando sistema..." >> $LOG_FILE
arch-chroot /.snapshots/${SNAPSHOT_ID}/writable pacman -Syu --noconfirm 2>>$LOG_FILE

# Crear snapshot post-actualizaci√≥n
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Creando snapshot post-actualizaci√≥n..." >> $LOG_FILE
snapper create -t post --pre-number ${SNAPSHOT_ID} --description "[AUTO] Post-actualizaci√≥n" 2>>$LOG_FILE

# Registrar √©xito
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Actualizaci√≥n completada exitosamente" >> $LOG_FILE
EOF

    chmod +x /usr/bin/transactional-update

    # Configurar servicio systemd
    cat <<EOF > "$SYSTEMD_SERVICE"
[Unit]
Description=Actualizaci√≥n Transaccional del Sistema
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > "$SYSTEMD_TIMER"
[Unit]
Description=Actualizaciones Autom√°ticas Diarias

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer | tee -a "$LOG_FILE"
    log "${GREEN}‚úÖ Timer de actualizaciones configurado${NC}"
}

# Configuraci√≥n de SystemDBoot
setup_systemdboot() {
    log "${BLUE}üë¢ Configurando entradas de arranque...${NC}"

    # Obtener informaci√≥n del sistema
    local current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)
    local root_partuuid=$(blkid -s PARTUUID -o value $(findmnt / -o SOURCE -n))

    # Crear entrada de arranque para snapshots
    cat <<EOF > "$BOOT_LOADER_ENTRIES/arch-snapshot.conf"
title Arch Linux (Snapshot BTRFS)
linux /vmlinuz-${current_kernel}
initrd /initramfs-${current_kernel}.img
options root=PARTUUID=${root_partuuid} rootflags=subvol=@.snapshots rw
EOF

    # Actualizar GRUB
    grub-mkconfig -o /boot/grub/grub.cfg | tee -a "$LOG_FILE"
    log "${GREEN}‚úÖ Entradas de arranque actualizadas${NC}"
}

# Sistema de limpieza autom√°tica
setup_snapshot_cleanup() {
    log "${BLUE}üßπ Configurando pol√≠tica de retenci√≥n...${NC}"

    cat <<EOF > "$SNAPSHOT_CLEANUP_SERVICE"
[Unit]
Description=Limpieza Autom√°tica de Snapshots

[Service]
Type=oneshot
ExecStart=/usr/bin/sh -c 'snapper cleanup number && snapper cleanup timeline'
EOF

    cat <<EOF > "$SNAPSHOT_CLEANUP_TIMER"
[Unit]
Description=Limpieza Semanal de Snapshots

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now snapper-cleanup.timer | tee -a "$LOG_FILE"
    log "${GREEN}‚úÖ Programa de limpieza activado${NC}"
}

# Funci√≥n principal
main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates
    setup_systemdboot
    setup_snapshot_cleanup

    log "${GREEN}üéâ Configuraci√≥n completada exitosamente!${NC}"
    log "${YELLOW}‚ö†Ô∏è  Recomendaciones finales:"
    log "1. Verifique las entradas de arranque: ${BOOT_LOADER_ENTRIES}"
    log "2. Revise los timers activos: systemctl list-timers"
    log "3. Monitorice los logs: tail -f ${LOG_FILE}${NC}"
}

main "$@"
#test13
