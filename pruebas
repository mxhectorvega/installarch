#!/usr/bin/env bash
set -euo pipefail

# ... (configuraci√≥n previa de colores y variables se mantiene igual)

configure_snapper() {
    log "${BLUE}üîÑ Configurando Snapper...${NC}"

    # Obtener dispositivo ra√≠z
    local root_dev=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')
    local subvol_path="@.snapshots"

    # Verificar si el subvolumen existe
    if btrfs subvolume list / | grep -q "path $subvol_path"; then
        log "${YELLOW}‚ö†Ô∏è  Subvolumen .snapshots ya existe, reconfigurando...${NC}"

        # Montar dispositivo ra√≠z en modo plano
        mkdir -p /mnt/root
        mount -t btrfs -o noatime,compress=zstd,space_cache=v2 $root_dev /mnt/root

        # Eliminar subvolumen existente de forma segura
        if [ -d "/mnt/root/$subvol_path" ]; then
            log "${YELLOW}üóëÔ∏è  Eliminando subvolumen existente...${NC}"
            btrfs subvolume delete "/mnt/root/$subvol_path" | tee -a "$LOG_FILE"
            sync
        fi

        # Crear nuevo subvolumen
        log "${BLUE}üÜï Creando nuevo subvolumen...${NC}"
        btrfs subvolume create "/mnt/root/$subvol_path" | tee -a "$LOG_FILE"

        # Desmontar y limpiar
        umount /mnt/root
        rm -rf /mnt/root
    fi

    # Configurar Snapper
    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        log "${BLUE}üìù Creando configuraci√≥n de Snapper...${NC}"
        snapper -c root create-config -f btrfs --subvolume "/.snapshots" / | tee -a "$LOG_FILE"

        # Ajustar configuraci√≥n
        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY="5" \
            TIMELINE_LIMIT_DAILY="7" \
            TIMELINE_LIMIT_WEEKLY="0" \
            TIMELINE_LIMIT_MONTHLY="0" | tee -a "$LOG_FILE"

        # Corregir permisos
        chmod 750 /.snapshots
        chown :wheel /.snapshots

        # Sincronizar cambios
        btrfs filesystem sync /

        # Habilitar servicios
        systemctl enable --now snapper-timeline.timer snapper-cleanup.timer | tee -a "$LOG_FILE"
    fi
}

# Configurar actualizaciones transaccionales
setup_transactional_updates() {
    log "${BLUE}‚öôÔ∏è  Configurando actualizaciones transaccionales...${NC}"

    # Crear directorio para montaje
    mkdir -p /.snapshots/writable

    # Crear script de actualizaci√≥n
    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

# Obtener ID de snapshot
SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualizaci√≥n transaccional")

# Crear snapshot escribible
btrfs subvolume snapshot /.snapshots/$SNAPSHOT_ID/snapshot /.snapshots/$SNAPSHOT_ID/writable
mount --bind / /.snapshots/$SNAPSHOT_ID/writable

# Funci√≥n de limpieza
cleanup() {
    umount -l /.snapshots/$SNAPSHOT_ID/writable
    btrfs subvolume delete /.snapshots/$SNAPSHOT_ID/writable
    snapper delete $SNAPSHOT_ID
}
trap cleanup EXIT

# Ejecutar actualizaci√≥n en chroot
arch-chroot /.snapshots/$SNAPSHOT_ID/writable pacman -Syu --noconfirm

# Crear snapshot post-actualizaci√≥n
snapper create -t post --pre-number $SNAPSHOT_ID --description "Post actualizaci√≥n"
EOF

    chmod +x /usr/bin/transactional-update

    # Configurar servicio systemd
    cat <<EOF > "$SYSTEMD_SERVICE"
[Unit]
Description=Transactional System Update
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > "$SYSTEMD_TIMER"
[Unit]
Description=Actualizaciones autom√°ticas diarias

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer | tee -a "$LOG_FILE"
}

# Configurar SystemDBoot
setup_systemdboot() {
    log "${BLUE}üë¢ Configurando SystemDBoot...${NC}"

    # Obtener kernel actual
    local current_kernel=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)
    local root_partuuid=$(blkid -s PARTUUID -o value $(findmnt / -o SOURCE -n))

    # Crear entrada de arranque
    cat <<EOF > "$BOOT_LOADER_ENTRIES/arch-snapshot.conf"
title Arch Linux (Snapshot BTRFS)
linux /vmlinuz-$current_kernel
initrd /initramfs-$current_kernel.img
options root=PARTUUID=$root_partuuid rootflags=subvol=@.snapshots rw
EOF

    # Actualizar configuraci√≥n de grub
    grub-mkconfig -o /boot/grub/grub.cfg | tee -a "$LOG_FILE"
}

# Configurar limpieza de snapshots
setup_snapshot_cleanup() {
    log "${BLUE}üßπ Configurando limpieza autom√°tica...${NC}"

    cat <<EOF > "$SNAPSHOT_CLEANUP_SERVICE"
[Unit]
Description=Limpieza de snapshots antiguos

[Service]
Type=oneshot
ExecStart=/usr/bin/bash -c 'snapper cleanup number && snapper cleanup timeline'
EOF

    cat <<EOF > "$SNAPSHOT_CLEANUP_TIMER"
[Unit]
Description=Limpieza semanal de snapshots

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now snapper-cleanup.timer | tee -a "$LOG_FILE"
}

# Funci√≥n principal
main() {
    check_root
    install_dependencies
    configure_snapper
    setup_transactional_updates
    setup_systemdboot
    setup_snapshot_cleanup

    log "${GREEN}‚úÖ Configuraci√≥n completada con √©xito!${NC}"
    log "${YELLOW}üí° Recomendaci√≥n: Verifique las entradas de arranque y reinicie el sistema${NC}"
    log "${BLUE}üìÑ Registro completo en: $LOG_FILE${NC}"
}

main "$@"
#test5
