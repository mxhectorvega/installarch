#!/bin/sh

# Variables globales
LOG_FILE="$HOME/installarch.log"
REPO_URL="https://github.com/mxhectorvega/installarch"
INSTALL_DIR="/tmp/installarch"
ROOT_PASS=""
USER_PASS=""
USER_NAME=""

# Función para limpiar residuos
cleanup() {
    rm -rf "$INSTALL_DIR"
    if [ -f "$LOG_FILE" ]; then
        rm -f "$LOG_FILE"
    fi
}

# Crear archivo de registro
create_log() {
    cleanup
    echo "Registro de instalación - $(date)" > "$LOG_FILE"
    echo "========================================" >> "$LOG_FILE"
}

# Clonar repositorio
clone_repo() {
    if [ -d "$INSTALL_DIR" ]; then
        rm -rf "$INSTALL_DIR"
    fi
    git clone "$REPO_URL" "$INSTALL_DIR" >> "$LOG_FILE" 2>&1
    if [ $? -ne 0 ]; then
        whiptail --title "Error" --msgbox "No se pudo clonar el repositorio. Verifica tu conexión a internet." 10 60
        exit 1
    fi
}

# Validar dependencias
validate_dependencies() {
    MISSING_DEPS=""
    for DEP in git whiptail makepkg; do
        if ! command -v "$DEP" >/dev/null 2>&1; then
            MISSING_DEPS="$MISSING_DEPS $DEP"
        fi
    done

    if [ -n "$MISSING_DEPS" ]; then
        whiptail --title "Error" --msgbox "Faltan las siguientes dependencias:$MISSING_DEPS" 10 60
        exit 1
    fi
}

# Pantalla de Bienvenida
welcome_screen() {
    whiptail --title "Bienvenido" --yesno "Bienvenido al instalador de scripts de mxhectorvega.\n\nEl archivo de registros se almacenará en: $LOG_FILE\n\n¿Deseas iniciar la instalación?" 15 60
    if [ $? -ne 0 ]; then
        exit 0
    fi
}

# Pantalla de Lista de Scripts
list_scripts() {
    cd "$INSTALL_DIR" || exit 1
    SCRIPTS=$(find . -type f -executable ! -name "*.*" | awk '{print NR, $0}' | column -t)
    if [ -z "$SCRIPTS" ]; then
        whiptail --title "Error" --msgbox "No se encontraron scripts ejecutables en el repositorio." 10 60
        exit 1
    fi

    CHOICE=$(whiptail --title "Lista de Scripts" --menu "Selecciona un script para ejecutar:" 20 60 10 $SCRIPTS 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
        return 1
    fi

    SELECTED_SCRIPT=$(echo "$SCRIPTS" | grep "^$CHOICE " | awk '{print $2}')
    echo "Script seleccionado: $SELECTED_SCRIPT" >> "$LOG_FILE"
}

# Pantalla de Instalación
install_script() {
    TOTAL_STEPS=$(grep -c '^#' "$INSTALL_DIR/$SELECTED_SCRIPT")
    STEP=0

    (
        while IFS= read -r LINE; do
            STEP=$((STEP + 1))
            PERCENTAGE=$((STEP * 100 / TOTAL_STEPS))
            echo "$PERCENTAGE"
            echo "# Ejecutando paso $STEP de $TOTAL_STEPS: $LINE"

            # Cambiar al usuario sin privilegios si es necesario
            if echo "$LINE" | grep -q 'makepkg'; then
                su "$USER_NAME" -c "$LINE" >> "$LOG_FILE" 2>&1
            elif echo "$LINE" | grep -q 'git'; then
                su "$USER_NAME" -c "$LINE" >> "$LOG_FILE" 2>&1
            else
                eval "$LINE" >> "$LOG_FILE" 2>&1
            fi

            if [ $? -ne 0 ]; then
                echo "Error en el paso $STEP: $LINE" >> "$LOG_FILE"
                exit 1
            fi
        done < "$INSTALL_DIR/$SELECTED_SCRIPT"
    ) | whiptail --gauge "Instalando $SELECTED_SCRIPT..." 10 60 0

    if [ $? -ne 0 ]; then
        whiptail --title "Error" --msgbox "La instalación falló. Consulta el archivo de registros en $LOG_FILE" 10 60
        return 1
    fi
}

# Pantalla Final
final_screen() {
    whiptail --title "Finalizado" --msgbox "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega" 10 60

    if whiptail --title "Mostrar Log" --yesno "¿Deseas ver el archivo de registros?" 10 60; then
        whiptail --textbox "$LOG_FILE" 20 60
    fi
}

# Almacenar contraseñas
store_credentials() {
    ROOT_PASS=$(whiptail --passwordbox "Ingresa la contraseña de root:" 10 60 3>&1 1>&2 2>&3)
    USER_PASS=$(whiptail --passwordbox "Ingresa la contraseña del usuario $USER_NAME:" 10 60 3>&1 1>&2 2>&3)
    echo "Contraseña root almacenada." >> "$LOG_FILE"
    echo "Contraseña usuario almacenada." >> "$LOG_FILE"
}

# Función principal
main() {
    create_log
    validate_dependencies
    welcome_screen
    store_credentials
    clone_repo

    while true; do
        if list_scripts; then
            install_script
            if [ $? -eq 0 ]; then
                break
            fi
        else
            exit 0
        fi
    done

    final_screen
    cleanup
}

main
