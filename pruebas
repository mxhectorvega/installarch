#!/bin/bash

# Colores para los mensajes
ROJO='\033[0;31m'
VERDE='\033[0;32m'
AMARILLO='\033[0;33m'
AZUL='\033[0;34m'
NC='\033[0m' # Sin Color

# Archivo de registro
LOG_FILE="/var/log/transactional-update.log"

# Función para registrar mensajes
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" >> "${LOG_FILE}"

    case ${level} in
        "ERROR")   echo -e "${ROJO}[ERROR] ${message}${NC}" ;;
        "INFO")    echo -e "${AZUL}[INFO] ${message}${NC}" ;;
        "SUCCESS") echo -e "${VERDE}[SUCCESS] ${message}${NC}" ;;
        "WARNING") echo -e "${AMARILLO}[WARNING] ${message}${NC}" ;;
    esac
}

# Verificar si se ejecuta como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_message "ERROR" "Este script debe ejecutarse como root"
        exit 1
    fi
}

# Verificar e instalar dependencias
check_dependencies() {
    local deps=("snapper" "btrfs-progs" "pacman" "systemd")
    local missing_deps=()

    for dep in "${deps[@]}"; do
        if ! pacman -Qi "${dep}" >/dev/null 2>&1; then
            missing_deps+=("${dep}")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_message "INFO" "Instalando dependencias faltantes: ${missing_deps[*]}"
        pacman -Sy --noconfirm "${missing_deps[@]}" || {
            log_message "ERROR" "Error al instalar dependencias"
            exit 1
        }
    fi
}

# Configurar Snapper
setup_snapper() {
    if [[ ! -d "/.snapshots" ]]; then
        log_message "ERROR" "El subvolumen /.snapshots no existe"
        exit 1
    }

    if ! snapper list-configs | grep -q "root"; then
        log_message "INFO" "Configurando Snapper para el sistema root"
        snapper create-config / || {
            log_message "ERROR" "Error al crear la configuración de Snapper"
            exit 1
        }
    fi
}

# Crear entrada de boot para snapshot
create_boot_entry() {
    local snapshot_num=$1
    local snapshot_date=$(date '+%Y%m%d-%H%M%S')

    # Crear entrada de boot
    cp /boot/loader/entries/arch.conf "/boot/loader/entries/arch-${snapshot_num}.conf"
    sed -i "s/title.*/title Arch Linux (Snapshot ${snapshot_num} - ${snapshot_date})/" "/boot/loader/entries/arch-${snapshot_num}.conf"
    sed -i "s/root=.*/root=PARTUUID=$(blkid -s PARTUUID -o value $(findmnt -n -o SOURCE /)) rootflags=subvol=@snapshots\/${snapshot_num}\/snapshot/" "/boot/loader/entries/arch-${snapshot_num}.conf"
}

# Realizar actualización transaccional
do_transactional_update() {
    log_message "INFO" "Iniciando actualización transaccional"

    # Crear snapshot pre-actualización
    local snapshot_num=$(snapper create --type pre --print-number --description "transactional-update-pre" --cleanup-algorithm number)

    # Actualizar el sistema
    if pacman -Syu --noconfirm; then
        # Crear snapshot post-actualización
        snapper create --type post --pre-number "$snapshot_num" --description "transactional-update-post"
        create_boot_entry "$snapshot_num"
        log_message "SUCCESS" "Actualización transaccional completada exitosamente"
    else
        log_message "ERROR" "Error durante la actualización"
        # Revertir al snapshot anterior
        snapper undochange "$snapshot_num..0"
        log_message "INFO" "Sistema revertido al estado anterior"
        exit 1
    fi
}

# Limpiar snapshots antiguos
cleanup_snapshots() {
    log_message "INFO" "Limpiando snapshots antiguos"
    snapper cleanup number || log_message "WARNING" "Error al limpiar snapshots"
}

# Crear servicios y timers systemd
setup_systemd() {
    # Crear servicio de actualización transaccional
    cat > /etc/systemd/system/transactional-update.service << EOF
[Unit]
Description=Transactional Update Service
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/transactional-update.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

    # Crear timer para actualizaciones automáticas
    cat > /etc/systemd/system/transactional-update.timer << EOF
[Unit]
Description=Transactional Update Timer

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # Recargar systemd y habilitar servicios
    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
}

# Función principal
main() {
    check_root
    check_dependencies
    setup_snapper

    # Si se ejecuta manualmente
    if [[ "$1" == "update" ]]; then
        do_transactional_update
        cleanup_snapshots
    else
        setup_systemd
        log_message "SUCCESS" "Sistema configurado para actualizaciones transaccionales"
    fi
}

# Ejecutar script
main "$@"
#test2
