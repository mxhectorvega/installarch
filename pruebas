#!/usr/bin/env bash

# Script para transformar Arch Linux en un
# sistema inmutable con actualizaciones
# transaccionales utilizando systemd-boot
# Adaptado para instalaciones con archinstall
# Repositorio: https://github.com/mxhectorvega/installarch
# Ejecuci√≥n: bash <(curl -L tinyurl.com/mxinmutable)
# Fecha de actualizaci√≥n: 10/02/2025
# Versi√≥n: 1.1

set -euo pipefail

# Configuraci√≥n de colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Variables del sistema
LOG_FILE="/var/log/btrfs-setup.log"
BOOT_LOADER_ENTRIES="/boot/loader/entries"
SNAPPER_CONFIG="/etc/snapper/configs/root"
HOOK_SCRIPT="/usr/local/bin/update-boot-entries"

# Funci√≥n de registro mejorada
log() {
    local tipo="$1"
    local mensaje="$2"
    local color

    case $tipo in
        "√âXITO") color="${GREEN}" ;;
        "ADVERTENCIA") color="${YELLOW}" ;;
        "ERROR") color="${RED}" ;;
        "INFO") color="${CYAN}" ;;
        *) color="${NC}" ;;
    esac

    echo -e "${MAGENTA}[$(date '+%Y-%m-%d %H:%M:%S')] ${color}${tipo}: ${mensaje}${NC}" | tee -a "$LOG_FILE"
}

# Manejo de errores robusto
manejar_error() {
    log "ERROR" "Fallo en l√≠nea $1: $2"
    log "ADVERTENCIA" "Iniciando recuperaci√≥n..."

    if mountpoint -q /mnt/root; then
        umount -l /mnt/root || true
    fi
    rm -rf /mnt/root

    log "ERROR" "Proceso abortado. Verifique el log: ${LOG_FILE}"
    exit 1
}

trap 'manejar_error ${LINENO} "$BASH_COMMAND"' ERR

# Verificaci√≥n de estructura Btrfs
verificar_subvolumenes() {
    log "INFO" "üîç Verificando estructura de subvol√∫menes..."

    local subvolumenes=("@home" "@.snapshots" "@log" "@pkg")
    local dispositivo_raiz=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')

    # Crear directorio temporal
    mkdir -p /mnt/root || {
        log "ERROR" "No se pudo crear /mnt/root"
        exit 1
    }

    # Montar subvolumen ra√≠z
    if ! mount -t btrfs -o subvol=@ "${dispositivo_raiz}" /mnt/root; then
        log "ERROR" "Error al montar subvolumen ra√≠z"
        exit 1
    fi

    # Verificar subvol√∫menes requeridos
    for subvol in "${subvolumenes[@]}"; do
        if ! btrfs subvolume list /mnt/root | grep -q "path ${subvol}$"; then
            log "ERROR" "Subvolumen ${subvol} no encontrado"
            umount /mnt/root
            exit 1
        fi
    done

    umount /mnt/root
    rm -rf /mnt/root
    log "√âXITO" "‚úÖ Estructura Btrfs validada"
}

# Instalaci√≥n de dependencias
instalar_dependencias() {
    log "INFO" "üì¶ Instalando dependencias..."

    local dependencias=(
        snapper snap-pac      # Herramientas de snapshots y soporte para pacman
        btrfs-progs           # Utilidades Btrfs
        inotify-tools         # Monitoreo de cambios en el sistema
        python-dbus           # Integraci√≥n con DBus
        python-notify2        # Notificaciones del sistema
    )

    for pkg in "${dependencias[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            log "INFO" "Instalando: ${pkg}..."
            pacman -S --noconfirm "$pkg" | tee -a "$LOG_FILE"
        else
            log "INFO" "Paquete ${pkg} ya instalado"
        fi
    done
}

# Configuraci√≥n de Snapper
configurar_snapper() {
    log "INFO" "‚öôÔ∏è Configurando Snapper..."

    if [[ ! -f "$SNAPPER_CONFIG" ]]; then
        log "INFO" "Creando configuraci√≥n inicial..."
        snapper -c root create-config /.snapshots | tee -a "$LOG_FILE"

        log "INFO" "Aplicando pol√≠ticas de retenci√≥n..."
        snapper -c root set-config \
            ALLOW_USERS=root \
            TIMELINE_LIMIT_HOURLY="5" \
            TIMELINE_LIMIT_DAILY="7" \
            TIMELINE_LIMIT_WEEKLY="0" | tee -a "$LOG_FILE"

        chmod 750 /.snapshots
        chown :wheel /.snapshots
    fi

    systemctl enable --now snapper-timeline.timer snapper-cleanup.timer
    log "√âXITO" "‚úÖ Snapper configurado correctamente"
}

# Sistema de actualizaciones transaccionales
configurar_actualizaciones() {
    log "INFO" "üîÑ Configurando actualizaciones..."

    cat <<'EOF' > /usr/bin/transactional-update
#!/bin/bash
set -euo pipefail

# Variables del sistema
LOG_FILE="/var/log/transactional-update.log"
SNAPSHOT_ID=$(snapper create -t pre --print-number --description "Actualizaci√≥n autom√°tica")

# Registrar inicio
echo -e "\n[$(date '+%Y-%m-%d %H:%M:%S')] Iniciando actualizaci√≥n (#${SNAPSHOT_ID})" >> $LOG_FILE

# Crear entorno seguro
btrfs subvolume snapshot /.snapshots/${SNAPSHOT_ID}/snapshot /.snapshots/${SNAPSHOT_ID}/writable
mount --bind / /.snapshots/${SNAPSHOT_ID}/writable

# Funci√≥n de limpieza
limpiar() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Realizando limpieza..." >> $LOG_FILE
    umount -l /.snapshots/${SNAPSHOT_ID}/writable || true
    btrfs subvolume delete /.snapshots/${SNAPSHOT_ID}/writable 2>>$LOG_FILE
    snapper delete ${SNAPSHOT_ID} 2>>$LOG_FILE
    exit 1
}
trap limpiar ERR

# Ejecutar actualizaci√≥n
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Actualizando sistema..." >> $LOG_FILE
arch-chroot /.snapshots/${SNAPSHOT_ID}/writable pacman -Syu --noconfirm 2>>$LOG_FILE

# Crear snapshot post-actualizaci√≥n
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Creando snapshot final..." >> $LOG_FILE
snapper create -t post --pre-number ${SNAPSHOT_ID} --description "Post-actualizaci√≥n" 2>>$LOG_FILE

# Actualizar entradas de arranque
/usr/local/bin/update-boot-entries

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Actualizaci√≥n completada" >> $LOG_FILE
EOF

    chmod +x /usr/bin/transactional-update

    # Configurar servicio autom√°tico
    cat <<EOF > /etc/systemd/system/transactional-update.service
[Unit]
Description=Actualizaci√≥n Transaccional
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/transactional-update
EOF

    cat <<EOF > /etc/systemd/system/transactional-update.timer
[Unit]
Description=Actualizaciones Diarias Autom√°ticas

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=1h

[Install]
WantedBy=timers.target
EOF

    systemctl daemon-reload
    systemctl enable --now transactional-update.timer
    log "√âXITO" "‚úÖ Sistema de actualizaciones configurado"
}

# Configuraci√≥n de systemd-boot
#!/usr/bin/env bash
set -euo pipefail

# ... (mantener configuraci√≥n previa)

configurar_boot() {
    log "INFO" "üë¢ Configurando systemd-boot..."

    # Asegurar existencia del directorio
    mkdir -p "${BOOT_LOADER_ENTRIES}"

    # Crear hook de actualizaci√≥n corregido
    cat <<'EOF' > $HOOK_SCRIPT
#!/bin/bash
set -euo pipefail

# Variables cr√≠ticas
BOOT_LOADER_ENTRIES="/boot/loader/entries"
ROOT_DEVICE=$(findmnt / -o SOURCE -n | sed 's/\[.*\]//')
ROOT_UUID=$(blkid -s UUID -o value "${ROOT_DEVICE}")
KERNEL_ACTUAL=$(ls /usr/lib/modules | grep -v extramodules | sort -V | tail -n1)

# Limpiar entradas antiguas
rm -f "${BOOT_LOADER_ENTRIES}/arch-snapshot-"*.conf || true

# Entrada principal
cat <<CONF > "${BOOT_LOADER_ENTRIES}/arch.conf"
title Arch Linux (Sistema Actual)
linux /vmlinuz-${KERNEL_ACTUAL}
initrd /initramfs-${KERNEL_ACTUAL}.img
options root=UUID=${ROOT_UUID} rootflags=subvol=@,defaults,noatime,compress=zstd rw
CONF

# Generar entradas para snapshots
snapper -c root list | awk '/pre|post/ {print $1}' | while read -r snapshot_id; do
    DESCRIPCION=$(snapper -c root info "${snapshot_id}" | grep "Description" | cut -d':' -f2 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

    cat <<CONF > "${BOOT_LOADER_ENTRIES}/arch-snapshot-${snapshot_id}.conf"
title Arch Linux (Snapshot #${snapshot_id}) - ${DESCRIPCION}
linux /vmlinuz-${KERNEL_ACTUAL}
initrd /initramfs-${KERNEL_ACTUAL}.img
options root=UUID=${ROOT_UUID} rootflags=subvol=@.snapshots/${snapshot_id}/snapshot,defaults,noatime,compress=zstd rw
CONF
done

# Actualizar firmware UEFI
bootctl update
EOF

    chmod +x $HOOK_SCRIPT

    # A√±adir hook a Snapper
    echo "POST_CREATE_SNAPSHOT=\"${HOOK_SCRIPT}\"" >> /etc/snapper/configs/root

    # Forzar primera ejecuci√≥n
    $HOOK_SCRIPT
    log "√âXITO" "‚úÖ Entradas de arranque regeneradas"
}

# Funci√≥n principal
main() {
    log "INFO" "üöÄ Iniciando configuraci√≥n del sistema"
    verificar_subvolumenes
    instalar_dependencias
    configurar_snapper
    configurar_actualizaciones
    configurar_boot

    log "√âXITO" "üéâ Configuraci√≥n completada exitosamente!"
    log "ADVERTENCIA" "‚ö†Ô∏è Recomendaciones finales:"
    log "INFO" "1. Verifique entradas de arranque: ls ${BOOT_LOADER_ENTRIES}"
    log "INFO" "2. Revise timers: systemctl list-timers"
    log "INFO" "3. Pruebe actualizaci√≥n: sudo transactional-update"
    log "INFO" "4. Monitorice logs: tail -f ${LOG_FILE} y journalctl"
}

main "$@"
#update22
