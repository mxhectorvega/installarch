#!/usr/bin/env bash

# Strict mode
set -euo pipefail

# Debug mode
exec 5> "$HOME/arch_install.debug.log"
BASH_XTRACEFD="5"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
LOG_FILE="$HOME/arch_install.log"
ERROR_LOG="$HOME/arch_install.error.log"
DEBUG_DIR="$HOME/arch_install.debug"
INSTALLED_PACKAGES=()
TEMP_DIR="/tmp/arch_installer_$$"

# Verificaci√≥n inicial de requisitos
check_requirements() {
    echo -e "${YELLOW}Verificando requisitos...${NC}"

    # Verificar si es Arch Linux
    if ! grep -q "Arch Linux" /etc/os-release; then
        echo -e "${RED}Error: Este script solo funciona en Arch Linux${NC}"
        exit 1
    fi

    # Verificar permisos de sudo
    if ! sudo -v; then
        echo -e "${RED}Error: Se requieren privilegios de sudo${NC}"
        exit 1
    fi

    # Verificar herramientas b√°sicas
    required_tools=("curl" "tee" "less")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            echo -e "${RED}Error: Falta la herramienta requerida: $tool${NC}"
            exit 1
        fi
    done

    # Crear directorios necesarios
    mkdir -p "$TEMP_DIR" "$DEBUG_DIR"

    # Verificar permisos de escritura para logs
    if ! touch "$LOG_FILE" 2>/dev/null || ! touch "$ERROR_LOG" 2>/dev/null; then
        echo -e "${RED}Error: No se puede escribir en los archivos de log${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úì Todos los requisitos cumplidos${NC}"
}

# Funci√≥n de limpieza mejorada
cleanup() {
    local status=$?
    if [ $status -ne 0 ]; then
        echo -e "\n${RED}Error detectado. C√≥digo: $status${NC}"
        echo -e "${RED}Consultando logs para m√°s detalles...${NC}"

        # Mostrar √∫ltimas l√≠neas del log de errores
        if [ -f "$ERROR_LOG" ]; then
            echo -e "\n${YELLOW}√öltimas l√≠neas del log de errores:${NC}"
            tail -n 20 "$ERROR_LOG"
        fi

        # Preservar archivos temporales para debugging
        echo -e "\n${YELLOW}Guardando archivos de debug en: $DEBUG_DIR${NC}"
        cp -r "$TEMP_DIR"/* "$DEBUG_DIR/" 2>/dev/null || true

        # Desinstalar paquetes si es necesario
        if [ ${#INSTALLED_PACKAGES[@]} -gt 0 ]; then
            echo -e "\n${YELLOW}Desinstalando paquetes instalados:${NC}"
            for pkg in "${INSTALLED_PACKAGES[@]}"; do
                echo -e "${YELLOW}Desinstalando: $pkg${NC}"
                sudo pacman -R --noconfirm "$pkg" 2>/dev/null || true
            done
        fi

        echo -e "${GREEN}Sistema restaurado${NC}"
    else
        rm -rf "$TEMP_DIR"
    fi
}

trap cleanup EXIT
trap 'trap - EXIT; cleanup; exit 1' INT TERM

# Funci√≥n de bienvenida
show_welcome() {
    clear
    echo -e "${GREEN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${GREEN}‚îÇ     Bienvenido al instalador de          ‚îÇ${NC}"
    echo -e "${GREEN}‚îÇ        scripts de mxhectorvega           ‚îÇ${NC}"
    echo -e "${GREEN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    echo -e "\nArchivo de registros: ${BLUE}$LOG_FILE${NC}"
    echo -e "Archivo de errores: ${BLUE}$ERROR_LOG${NC}\n"
    sleep 1
}

# Funci√≥n del men√∫
show_menu() {
    echo -e "${YELLOW}Lista de Scripts Disponibles:${NC}\n"

    echo -e "${CYAN}1)${NC} Optimizaciones para Pacman, Repo Chaotic y Paru - AUR Helper"
    echo -e "${CYAN}2)${NC} Software flatpak para el usuario dom√©stico"
    echo -e "${CYAN}3)${NC} Entorno de escritorio Gnome 47.x"
    echo -e "${CYAN}4)${NC} Controladores Wifi para MacBook Pro y Air"
    echo -e "${CYAN}5)${NC} Controladores para impresora Epson L3210"
    echo -e "${CYAN}6)${NC} Configuraciones para Hyprland"
    echo -e "${CYAN}0)${NC} Salir\n"
}

# Funci√≥n para registrar paquetes instalados
register_package() {
    INSTALLED_PACKAGES+=("$1")
    echo "Paquete registrado: $1" >> "$LOG_FILE"
}

# Funci√≥n para ejecutar script
execute_script() {
    local url="$1"
    local temp_script="$TEMP_DIR/script.sh"

    echo -e "\n${YELLOW}Verificando URL: $url${NC}" | tee -a "$LOG_FILE"
    if ! curl -I -s "$url" | grep -q "HTTP/[1-9].[0-9] [23].."; then
        echo -e "${RED}Error: URL no accesible${NC}" | tee -a "$LOG_FILE"
        return 1
    fi

    echo -e "\n${YELLOW}Descargando script...${NC}" | tee -a "$LOG_FILE"
    if ! curl -s "$url" > "$temp_script"; then
        echo -e "${RED}Error al descargar el script${NC}" | tee -a "$LOG_FILE"
        return 1
    fi

    if [ ! -s "$temp_script" ]; then
        echo -e "${RED}Error: Script descargado est√° vac√≠o${NC}" | tee -a "$LOG_FILE"
        return 1
    fi

    chmod +x "$temp_script"
    echo -e "${GREEN}Script descargado correctamente${NC}" | tee -a "$LOG_FILE"

    # Verificar sintaxis del script
    if ! bash -n "$temp_script"; then
        echo -e "${RED}Error: El script contiene errores de sintaxis${NC}" | tee -a "$LOG_FILE"
        return 1
    fi

    echo -e "\n${YELLOW}Ejecutando script...${NC}\n" | tee -a "$LOG_FILE"
    if ! bash "$temp_script" 2> >(tee -a "$ERROR_LOG") | tee -a "$LOG_FILE"; then
        echo -e "${RED}Error durante la ejecuci√≥n del script${NC}" | tee -a "$LOG_FILE"
        return 1
    fi

    return 0
}

# Funci√≥n de pantalla final
show_final_screen() {
    local status=$1

    clear
    if [ "$status" -eq 0 ]; then
        echo -e "${GREEN}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
        echo -e "${GREEN}‚îÇ      ¬°Instalaci√≥n completada con √©xito!  ‚îÇ${NC}"
        echo -e "${GREEN}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    else
        echo -e "${RED}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
        echo -e "${RED}‚îÇ   ¬°Error durante la instalaci√≥n!         ‚îÇ${NC}"
        echo -e "${RED}‚îÇ   Revise los archivos de registro        ‚îÇ${NC}"
        echo -e "${RED}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
    fi

    echo -e "\n${PURPLE}‚ô•Ô∏è Suscr√≠bete!${NC}"
    echo -e "${PURPLE}üåê https://www.youtube.com/mxhectorvega${NC}\n"

    if [ "$status" -ne 0 ]; then
        echo -e "${YELLOW}Presione cualquier tecla para ver el log de errores...${NC}"
        read -n 1
        less "$ERROR_LOG"
    fi

    echo -e "\n${YELLOW}Presione cualquier tecla para volver al men√∫...${NC}"
    read -n 1
}

# URLs de los scripts
declare -A SCRIPT_URLS=(
    [1]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/repos"
    [2]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/flatpak"
    [3]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/gnome"
    [4]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/macbook"
    [5]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/impresora"
    [6]="https://raw.githubusercontent.com/mxhectorvega/installarch/main/hyprland"
)

# Funci√≥n principal
main() {
    # Verificar requisitos
    check_requirements

    # Inicializar archivos de log
    : > "$LOG_FILE"
    : > "$ERROR_LOG"

    while true; do
        show_welcome
        show_menu

        read -rp $'\033[1;33mSeleccione una opci√≥n (0-6): \033[0m' selection

        case $selection in
            0)
                echo -e "\n${YELLOW}Saliendo del instalador...${NC}"
                exit 0
                ;;
            [1-6])
                echo -e "\n${YELLOW}Ejecutando opci√≥n $selection${NC}" | tee -a "$LOG_FILE"
                if execute_script "${SCRIPT_URLS[$selection]}"; then
                    show_final_screen 0
                else
                    show_final_screen 1
                fi
                ;;
            *)
                echo -e "\n${RED}Opci√≥n inv√°lida. Por favor, seleccione un n√∫mero del 0 al 6.${NC}"
                sleep 2
                continue
                ;;
        esac
    done
}

# Ejecutar el script
main "$@"
# 10:35PM
