#!/bin/sh

# Variables esenciales
LOG_FILE="/var/log/install_mxhectorvega.log"
REPO_URL="https://github.com/mxhectorvega/installarch"
DEPENDENCIES="whiptail git curl"
TMP_DIR="/tmp/installarch"
USER=$(logname)
ROOT_PASS=""
CURRENT_STEP=1
TERM=linux
export LOG_FILE USER

# Configuración de estilo para TTY
set_color() {
    printf "\033[0;37;44m"  # Fondo azul, texto blanco
    clear
}

# Sistema de logging
log() {
    printf "%s - %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$1" | tee -a "$LOG_FILE"
}

# Manejo de errores
trap 'error_handling "Error en línea $LINENO"' EXIT

error_handling() {
    log "ERROR: $1"
    whiptail --title "Error crítico" --msgbox "Ocurrió un error: $1\nVer $LOG_FILE" 10 60
    cleanup
    exit 1
}

# Validación inicial
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log "Este script debe ejecutarse como root"
        exit 1
    fi
}

check_dependencies() {
    for dep in $DEPENDENCIES; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log "Instalando dependencia faltante: $dep"
            pacman -Sy --noconfirm "$dep" || error_handling "Fallo instalación $dep"
        fi
    done
}

# Sistema de retroceso
cleanup() {
    log "Realizando limpieza..."
    rm -rf "$TMP_DIR"
    log "Limpieza completada"
}

# Gestión de usuario no privilegiado
run_as_user() {
    su - "$USER" -c "$1" || error_handling "Fallo al ejecutar como $USER: $1"
}

# Validación de scripts remotos
validate_scripts() {
    log "Validando compatibilidad..."
    for script in flatpak gnome repos impresora mackbook; do
        if ! curl -sSf "https://raw.githubusercontent.com/mxhectorvega/installarch/main/$script" >/dev/null; then
            error_handling "Script $script no disponible"
        fi
    done
}

# Flujo de instalación
welcome_screen() {
    set_color
    if ! whiptail --title "Instalador de scripts de mxhectorvega" \
        --yesno "Bienvenido al instalador\n\nLogs: $LOG_FILE" \
        --yes-button "Iniciar" --no-button "Cancelar" 12 60; then
        log "Instalación cancelada por usuario"
        cleanup
        exit 0
    fi
}

clone_repository() {
    log "Clonando repositorio..."
    if [ -d "$TMP_DIR" ]; then
        rm -rf "$TMP_DIR"
    fi
    run_as_user "git clone $REPO_URL $TMP_DIR" || error_handling "Fallo al clonar repo"
}

select_script() {
    while true; do
        SCRIPTS=$(find "$TMP_DIR" -type f -executable -exec basename {} \; | grep -v '\.' | awk '{print NR, $0, " "}')

        SELECTED=$(whiptail --title "Selección de script" \
            --menu "Seleccione un script:\n(Ctrl+C para salir)" \
            --cancel-button "Atrás" 20 60 10 $SCRIPTS 3>&1 1>&2 2>&3)

        case $? in
            0) break;;
            1) CURRENT_STEP=$((CURRENT_STEP-1)); return 1;;
            *) error_handling "Selección cancelada";;
        esac
    done

    SCRIPT_NAME=$(echo "$SCRIPTS" | awk -v sel="$SELECTED" '$1==sel {print $2}')
    log "Script seleccionado: $SCRIPT_NAME"
}

get_root_password() {
    while true; do
        ROOT_PASS=$(whiptail --title "Autenticación requerida" \
            --passwordbox "Contraseña de root:" 8 60 3>&1 1>&2 2>&3)

        [ -n "$ROOT_PASS" ] && break
    done
    log "Contraseña root almacenada"
}

install_progress() {
    log "Iniciando instalación de $SCRIPT_NAME"
    {
        echo 20
        echo "# Preparando entorno..."

        echo 40
        echo "# Ejecutando script..."
        run_as_user "echo '$ROOT_PASS' | sudo -S bash $TMP_DIR/$SCRIPT_NAME" || error_handling "Fallo en script"

        echo 100
        echo "# Instalación completada"
        sleep 1
    } | whiptail --gauge "Progreso de instalación:" 8 60 0
}

final_screen() {
    while true; do
        if whiptail --title "Instalación completada" \
            --yesno "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega" \
            --yes-button "Mostrar .log" --no-button "Finalizar" 12 60; then
            whiptail --title "Registro de instalación" --textbox "$LOG_FILE" 20 60
        else
            break
        fi
    done
}

# Flujo principal
main() {
    check_root
    exec > >(tee -a "$LOG_FILE") 2>&1
    check_dependencies
    validate_scripts
    welcome_screen

    while true; do
        case $CURRENT_STEP in
            1) clone_repository; CURRENT_STEP=2;;
            2) select_script && CURRENT_STEP=3 || CURRENT_STEP=1;;
            3) get_root_password; install_progress; final_screen; break;;
            *) error_handling "Flujo inválido";;
        esac
    done

    cleanup
    log "Instalación finalizada correctamente"
    exit 0
}

main
