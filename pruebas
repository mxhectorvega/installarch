#!/usr/bin/env bash
# Script de instalación para Arch Linux
# Autor: mxhectorvega
# Fecha: $(date +%Y-%m-%d)
# Registro de acciones en: $LOGFILE

# Variables globales
USER_NON_ROOT="$(who am i | awk '{print $1}')"
SCRIPTS_DIR="/home/$USER_NON_ROOT/installarch"
LOGFILE="/home/$USER_NON_ROOT/mxhectorvega_install.log"
REPO_URL="https://github.com/mxhectorvega/installarch"
DEPENDENCIAS=(whiptail git awk grep find)
ROOT_PASSWORD=""

# Función para registrar acciones
log() {
    mkdir -p "$(dirname "$LOGFILE")"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOGFILE"
}

# Función para comprobar e instalar dependencias
instalar_dependencias() {
    for pkg in "${DEPENDENCIAS[@]}"; do
        if ! command -v "$pkg" >/dev/null 2>&1; then
            log "Instalando dependencia: $pkg"
            pacman -Sy --noconfirm "$pkg" || manejar_error "No se pudo instalar $pkg"
        fi
    done
}

# Función para clonar el repositorio
clonar_repo() {
    if [ ! -d "$SCRIPTS_DIR" ]; then
        log "Clonando el repositorio en $SCRIPTS_DIR..."
        sudo -u "$USER_NON_ROOT" git clone "$REPO_URL" "$SCRIPTS_DIR" >>"$LOGFILE" 2>&1 || manejar_error "No se pudo clonar el repositorio."
    else
        log "Actualizando el repositorio en $SCRIPTS_DIR..."
        (cd "$SCRIPTS_DIR" && sudo -u "$USER_NON_ROOT" git pull >>"$LOGFILE" 2>&1) || manejar_error "No se pudo actualizar el repositorio."
    fi
}

# Función de manejo de errores
manejar_error() {
    whiptail --title "Error de Instalación" --msgbox "La instalación ha fallado.\n$1\nRevisa el archivo de registro en $LOGFILE para más detalles." 10 60
    log "Error: $1"
    exit 1
}

# Resto del script permanece igual...

# Inicio del Script
{
    instalar_dependencias
    solicitar_contraseña_root
    pantalla_bienvenida
    clonar_repo
    seleccionar_script
    ejecutar_script
    pantalla_final
    log "Limpieza de archivos temporales."
    rm -rf "$SCRIPTS_DIR"
    log "Instalación finalizada con éxito."
}
