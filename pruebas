#!/usr/bin/env bash
# Configuración
readonly AUR_HELPER="paru"  # Usamos paru como AUR helper
readonly LOG_FILE="${HOME}/driver-installer.log"
declare -a REQUIRED_DEPS=("dmidecode" "lshw" "pciutils" "usbutils" "sudo")
# Colores (ANSI)
readonly COLOR_VERDE='\033[0;32m'
readonly COLOR_ROJO='\033[0;31m'
readonly COLOR_AMARILLO='\033[1;33m'
readonly COLOR_RESET='\033[0m'

# Inicialización de arrays
declare -gA DRIVERS=(
    ["oficial"]=""
    ["aur"]=""
)
declare -gA DEPENDENCIAS=(
    ["oficial"]=""
    ["aur"]=""
)

# Registro de logs mejorado
registrar_log() {
    local mensaje="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ${mensaje}" | tee -a "${LOG_FILE}" >/dev/null
}

# Función de salida controlada
salir() {
    local codigo=$1
    shift
    echo -e "${COLOR_ROJO}$*${COLOR_RESET}" | tee -a "${LOG_FILE}"
    exit "${codigo}"
}

# Limpiar pantalla
limpiar_pantalla() {
    clear
}

# Verificar e instalar dependencias básicas
instalar_dependencias_basicas() {
    local -a faltantes=()
    for dep in "${REQUIRED_DEPS[@]}"; do
        pacman -Qq "${dep}" &>/dev/null || faltantes+=("${dep}")
    done
    if [[ ${#faltantes[@]} -gt 0 ]]; then
        limpiar_pantalla
        echo -e "${COLOR_AMARILLO}Instalando dependencias: ${faltantes[*]}${COLOR_RESET}"
        sudo pacman -Sy --noconfirm --needed "${faltantes[@]}" || salir 1 "Error instalando dependencias"
    fi
}

# Instalar paru-bin si no está presente
instalar_aur_helper() {
    if ! command -v "${AUR_HELPER}" &>/dev/null; then
        limpiar_pantalla
        echo -e "${COLOR_AMARILLO}Instalando paru-bin desde AUR...${COLOR_RESET}"
        sudo pacman -S --needed --noconfirm git base-devel || salir 1 "Error instalando dependencias para AUR"
        git clone https://aur.archlinux.org/paru-bin.git /tmp/paru-bin
        cd /tmp/paru-bin || salir 1 "No se pudo acceder al directorio temporal"
        makepkg -si --noconfirm || salir 1 "Error instalando paru-bin"
        cd - >/dev/null || salir 1 "No se pudo regresar al directorio anterior"
        rm -rf /tmp/paru-bin
    fi
}

# Escaneo de hardware profesional
escanear_hardware() {
    local -g SYS_VENDOR SYS_PRODUCT PCI_INFO USB_INFO
    registrar_log "Iniciando escaneo de hardware"
    SYS_VENDOR=$(sudo dmidecode -s system-manufacturer 2>/dev/null | tr -d '\n')
    SYS_PRODUCT=$(sudo dmidecode -s system-product-name 2>/dev/null | tr -d '\n')
    PCI_INFO=$(lspci -vnn)
    USB_INFO=$(lsusb)

    # Detección de MacBook
    if [[ "${SYS_VENDOR,,}" == *"apple"* ]]; then
        registrar_log "Detección de hardware Apple"
        DRIVERS["aur"]+="broadcom-wl-dkms b43-firmware apple-bce-dkms "
    fi

    # Detección específica de chipsets Realtek
    detectar_realtek
}

# Detección específica de chipsets Realtek
detectar_realtek() {
    if grep -qi "Realtek" <<< "${PCI_INFO}"; then
        registrar_log "Detección de chipset Realtek"
        DRIVERS["oficial"]+="rtl8192ce rtl8192cu rtl8192eu rtl8812au "
        DRIVERS["aur"]+="rtl88x2bu-dkms-git "
    fi
}

# Detección precisa de drivers
detectar_drivers() {
    registrar_log "Analizando componentes hardware"

    # Gráficos
    if grep -qi "VGA compatible controller: Intel" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="xf86-video-intel vulkan-intel libva-intel-driver intel-media-driver "
    elif grep -qi "VGA compatible controller: AMD" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="xf86-video-amdgpu vulkan-radeon libva-mesa-driver mesa-vdpau "
    elif grep -qi "VGA compatible controller: NVIDIA" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="nvidia-dkms nvidia-utils libva-vdpau-driver "
    fi

    # Redes
    if grep -qi "Network controller" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="iwd wpa_supplicant linux-firmware "
        DRIVERS["aur"]+="rtw89-dkms rtl88xxau-aircrack-dkms "
    fi

    # Audio (priorizar PipeWire)
    if grep -qi "Audio device" <<< "${PCI_INFO}"; then
        DRIVERS["oficial"]+="alsa-firmware alsa-utils pipewire pipewire-pulse wireplumber "
    fi

    # Optimización Wayland
    DRIVERS["oficial"]+="mesa libva-mesa-driver vulkan-icd-loader "
}

# Gestión de dependencias
verificar_dependencias() {
    registrar_log "Verificando paquetes necesarios"
    for categoria in "oficial" "aur"; do
        for pkg in ${DRIVERS[$categoria]}; do
            if ! pacman -Qq "${pkg}" &>/dev/null; then
                DEPENDENCIAS[$categoria]+="${pkg} "
            fi
        done
    done
}

# Configuración profesional de PipeWire
configurar_pipewire() {
    registrar_log "Configurando PipeWire"
    sudo systemctl enable --now pipewire pipewire-pulse wireplumber
    sudo sed -i 's/^load-module module-suspend-on-idle/#load-module module-suspend-on-idle/' /etc/pipewire/pipewire.conf
    echo -e "${COLOR_VERDE}PipeWire configurado correctamente.${COLOR_RESET}"
}

# Función mejorada de instalación con manejo de conflictos
instalar_paquetes() {
    local categoria=$1
    local lista_paquetes=$2
    local intentos=0

    while :; do
        case $categoria in
            "oficial")
                limpiar_pantalla
                echo -e "${COLOR_VERDE}Instalando desde repositorios oficiales...${COLOR_RESET}"
                sudo pacman -Sy --noconfirm --needed ${lista_paquetes}
                ;;
            "aur")
                if command -v "${AUR_HELPER}" &>/dev/null; then
                    limpiar_pantalla
                    echo -e "${COLOR_VERDE}Instalando desde AUR...${COLOR_RESET}"
                    "${AUR_HELPER}" -Sy --noconfirm --needed ${lista_paquetes}
                fi
                ;;
        esac

        local resultado=$?
        case $resultado in
            0) return 0 ;;
            1)  # Conflictos detectados
                limpiar_pantalla
                echo -e "\n${COLOR_ROJO}CONFLICTOS DETECTADOS${COLOR_RESET}"
                echo -e "${COLOR_AMARILLO}Se requiere intervención manual:${COLOR_RESET}"
                echo "1. Eliminar paquetes conflictivos y continuar"
                echo "2. Omitir estos paquetes"
                echo "3. Cancelar instalación"
                read -rp "Elección [1-3]: " opcion
                case $opcion in
                    1)
                        sudo pacman -Qq | grep -E 'pipewire-pulse|pulseaudio' | xargs sudo pacman -Rdd --noconfirm
                        ((intentos++))
                        [[ $intentos -lt 2 ]] && continue
                        ;;
                    2)
                        lista_paquetes=$(sed -E 's/(pulseaudio|pipewire-pulse)//g' <<< "$lista_paquetes")
                        continue
                        ;;
                    3)
                        salir 1 "Instalación cancelada por el usuario"
                        ;;
                esac
                ;;
            *) return $resultado ;;
        esac
        break
    done
}

# Mostrar resumen profesional
mostrar_resumen() {
    limpiar_pantalla
    local total=0
    echo -e "\n${COLOR_VERDE}=== RESUMEN DE INSTALACIÓN ==="
    echo -e "Sistema: ${SYS_VENDOR} ${SYS_PRODUCT}"
    for categoria in "oficial" "aur"; do
        count=$(wc -w <<< "${DEPENDENCIAS[$categoria]}")
        total=$((total + count))
        echo -e "\n${COLOR_AMARILLO}${categoria^^}: ${count} paquetes${COLOR_VERDE}"
        tr ' ' '\n' <<< "${DEPENDENCIAS[$categoria]}" | sed 's/^/• /'
    done
    echo -e "\nTotal paquetes instalados: ${total}${COLOR_RESET}"
}

# Main controlado
main() {
    trap 'salir 1 "Interrupción detectada"' SIGINT
    set -eo pipefail

    instalar_dependencias_basicas
    instalar_aur_helper
    escanear_hardware
    detectar_drivers
    verificar_dependencias

    if [[ -z "${DEPENDENCIAS[oficial]}${DEPENDENCIAS[aur]}" ]]; then
        echo -e "${COLOR_VERDE}El sistema ya tiene todos los drivers necesarios.${COLOR_RESET}"
        exit 0
    fi

    mostrar_resumen
    read -rp $'\n'"${COLOR_AMARILLO}¿Desea continuar con la instalación? [s/N]: ${COLOR_RESET}" respuesta
    [[ "${respuesta,,}" != "s" ]] && salir 0 "Instalación cancelada"

    for categoria in "oficial" "aur"; do
        [[ -n "${DEPENDENCIAS[$categoria]}" ]] && instalar_paquetes "${categoria}" "${DEPENDENCIAS[$categoria]}"
    done

    configurar_pipewire
    registrar_log "Instalación completada exitosamente"
    limpiar_pantalla
    echo -e "\n${COLOR_VERDE}¡Proceso completado con éxito!${COLOR_RESET}"
}

# Ejecución principal
main "$@"
#loco
