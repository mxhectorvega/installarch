#!/bin/sh

# Variables globales
LOG_FILE="$HOME/installarch.log"
REPO_URL="https://github.com/mxhectorvega/installarch.git"
TEMP_DIR="/tmp/installarch"
ROOT_PASS=""
SCRIPTS_DIR="$TEMP_DIR"

# Función para limpiar residuos
cleanup() {
    rm -rf "$TEMP_DIR"
}

# Función para manejar errores
error_handler() {
    local error_msg="$1"
    echo "ERROR: $error_msg" | tee -a "$LOG_FILE"
    echo "Consulte el archivo de registro: $LOG_FILE"
    cleanup
    exit 1
}

# Función para verificar si estamos en root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Este script debe ejecutarse como root."
        cleanup
        exit 1
    fi
}

# Función para almacenar la contraseña root
store_root_password() {
    echo "Ingrese la contraseña de root:"
    read -s ROOT_PASS
    echo
}

# Función para ejecutar comandos como root o cambiar al usuario sin privilegios
run_command() {
    local command="$1"
    if echo "$command" | grep -qE "makepkg|git"; then
        su -c "$command" -s /bin/sh "$(logname)" >> "$LOG_FILE" 2>&1
    else
        echo "$ROOT_PASS" | sudo -S sh -c "$command" >> "$LOG_FILE" 2>&1
    fi
    if [ $? -ne 0 ]; then
        error_handler "El comando '$command' falló."
    fi
}

# Función para mostrar la pantalla de bienvenida
welcome_screen() {
    clear
    echo "Bienvenido al instalador de scripts de mxhectorvega"
    echo "--------------------------------------------------"
    echo "Este instalador creará un archivo de registro en: $LOG_FILE"
    echo
    echo "Dependencias requeridas: git, sudo"
    echo "Presione 'i' para iniciar o 'c' para cancelar."

    while true; do
        read -n1 -r choice
        case "$choice" in
            i|I) break ;;
            c|C) cleanup; exit 0 ;;
            *) echo "Opción inválida. Presione 'i' para iniciar o 'c' para cancelar." ;;
        esac
    done
}

# Función para clonar el repositorio y listar scripts
list_scripts() {
    mkdir -p "$TEMP_DIR"
    run_command "git clone $REPO_URL $TEMP_DIR"
    if [ $? -ne 0 ]; then
        error_handler "No se pudo clonar el repositorio."
    fi

    # Encontrar scripts ejecutables sin extensión
    SCRIPT_LIST=$(find "$SCRIPTS_DIR" -maxdepth 1 -type f -executable ! -name "*.*" -exec basename {} \; | sort)

    # Mostrar lista de scripts
    clear
    echo "Lista de scripts disponibles:"
    echo "----------------------------"
    i=1
    for script in $SCRIPT_LIST; do
        printf "%2d. %s\n" "$i" "$script"
        i=$((i + 1))
    done
    echo
    echo "Seleccione un número para instalar un script, 'a' para atrás o 'c' para cancelar."

    while true; do
        read -n1 -r choice
        case "$choice" in
            [0-9])
                SELECTED_SCRIPT=$(echo "$SCRIPT_LIST" | sed -n "${choice}p")
                if [ -z "$SELECTED_SCRIPT" ]; then
                    echo "Selección inválida. Intente de nuevo."
                else
                    break
                fi
                ;;
            a|A) welcome_screen; return ;;
            c|C) cleanup; exit 0 ;;
            *) echo "Opción inválida. Seleccione un número, 'a' para atrás o 'c' para cancelar." ;;
        esac
    done
}

# Función para mostrar la barra de progreso durante la instalación
installation_progress() {
    local script_path="$SCRIPTS_DIR/$SELECTED_SCRIPT"
    total_steps=$(grep -oP '^# STEP' "$script_path" | wc -l)
    current_step=0

    clear
    echo "Instalando $SELECTED_SCRIPT..."
    echo "--------------------------------"

    while IFS= read -r line; do
        echo "$line" >> "$LOG_FILE" 2>&1
        if echo "$line" | grep -q "# STEP"; then
            current_step=$((current_step + 1))
            progress=$((current_step * 100 / total_steps))
            printf "\rProgreso: [%-50s] %d%%" "$(printf '#%.0s' $(seq 1 $((progress / 2))))" "$progress"
        fi
    done < <(bash "$script_path" 2>&1)

    echo
    if [ $? -ne 0 ]; then
        error_handler "La instalación falló."
    fi
}

# Función para mostrar la pantalla final
final_screen() {
    clear
    echo "¡Gracias por usar el instalador!"
    echo "♥️ Suscríbete! 🌐 https://www.youtube.com/mxhectorvega"
    echo
    echo "Presione 'f' para finalizar o 'm' para mostrar el archivo de registro."

    while true; do
        read -n1 -r choice
        case "$choice" in
            f|F) break ;;
            m|M) less "$LOG_FILE"; break ;;
            *) echo "Opción inválida. Presione 'f' para finalizar o 'm' para mostrar el archivo de registro." ;;
        esac
    done
}

# Main script execution
main() {
    check_root
    store_root_password

    # Verificar dependencias
    DEPENDENCIES="git sudo"
    for dep in $DEPENDENCIES; do
        if ! command -v "$dep" > /dev/null 2>&1; then
            error_handler "Se requiere la dependencia '$dep'. Por favor, instálela primero."
        fi
    done

    welcome_screen
    list_scripts
    installation_progress
    final_screen

    cleanup
    exit 0
}

# Ejecución del script principal
main
