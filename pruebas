#!/usr/bin/env bash

# Script para transformar Arch Linux en un sistema inmutable con actualizaciones transaccionales utilizando systemd-boot
# Repositorio: https://github.com/mxhectorvega/installarch
# Ejecución: bash <(curl -L is.gd/mxinmutable)
# Fecha de actualización: 10/02/2025
# Versión: 0.5

# Limpiamos la pantalla al inicio
clear

#####################
# Definición de colores
#####################
RED='\033[0;31m'       # Rojo
GREEN='\033[0;32m'     # Verde
YELLOW='\033[0;33m'    # Amarillo
BLUE='\033[0;34m'      # Azul
MAGENTA='\033[0;35m'   # Magenta
CYAN='\033[0;36m'      # Cian
NC='\033[0m'           # Sin color

#####################
# Funciones de mensajes
#####################
info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

exito() {
    echo -e "${GREEN}[ÉXITO]${NC} $1"
}

advertencia() {
    echo -e "${YELLOW}[ADVERTENCIA]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

#####################
# Verificar si es root
#####################
verificar_root() {
    if [ "$(id -u)" -ne 0 ]; then
        error "Este script debe ejecutarse como root."
    else
        exito "Privilegios de root verificados."
    fi
}

#####################
# Actualizar sistema
#####################
actualizar_sistema() {
    info "Actualizando el sistema..."
    pacman -Syu --noconfirm --needed || error "Fallo al actualizar el sistema."
    exito "Sistema actualizado correctamente."
}

#####################
# Instalar paquetes esenciales
#####################
instalar_paquetes() {
    info "Instalando paquetes esenciales..."

    # Lista de paquetes necesarios
    paquetes=(
        "btrfs-progs"
        "snapper"
        "snap-pac"
        "dracut"
        "haveged"
        "efibootmgr"
        "dosfstools"
    )

    # Actualizar la lista de paquetes
    pacman -Sy --noconfirm

    # Instalar paquetes faltantes
    for paquete in "${paquetes[@]}"; do
        if ! pacman -Qi "$paquete" &>/dev/null; then
            info "Instalando $paquete..."
            pacman -S --noconfirm "$paquete" || error "Fallo al instalar $paquete."
            exito "Paquete $paquete instalado."
        else
            exito "El paquete $paquete ya está instalado."
        fi
    done
}

#####################
# Comprobar conexión a Internet
#####################
comprobar_conexion() {
    info "Comprobando conexión a Internet..."
    if ! ping -c 1 archlinux.org &>/dev/null; then
        error "No hay conexión a Internet. Comprueba tu conexión y vuelve a intentarlo."
    else
        exito "Conexión a Internet verificada."
    fi
}

#####################
# Configurar sistema de archivos Btrfs
#####################
configurar_btrfs() {
    info "Configurando sistema de archivos Btrfs..."

    # Verificar si la raíz es Btrfs
    if ! findmnt -n -o FSTYPE / | grep -qw btrfs; then
        error "El sistema de archivos raíz no es Btrfs. Se requiere Btrfs para continuar."
    else
        exito "El sistema de archivos raíz es Btrfs."
    fi

    # Obtener dispositivo de la raíz
    DEVICE=$(findmnt -n -o SOURCE /)
    if [ -z "$DEVICE" ]; then
        error "No se pudo determinar el dispositivo de la raíz."
    else
        exito "Dispositivo de la raíz: $DEVICE"
    fi

    UUID=$(blkid -s UUID -o value "$DEVICE")
    if [ -z "$UUID" ]; then
        error "No se pudo obtener el UUID del dispositivo de la raíz."
    else
        exito "UUID del dispositivo de la raíz: $UUID"
    fi

    # Crear directorio de montaje
    MOUNT_POINT="/mnt/btrfs/btrfs_root"
    mkdir -p "$MOUNT_POINT"

    # Montar la raíz en subvolid=0 temporalmente
    info "Montando la raíz en $MOUNT_POINT..."
    mount -o subvolid=0 "$DEVICE" "$MOUNT_POINT" || error "No se pudo montar la raiz en $MOUNT_POINT."

    # Crear subvolúmenes si no existen
    subvolumes=("@" "@home" "@snapshots")

    for subvol in "${subvolumes[@]}"; do
        if [ ! -d "$MOUNT_POINT/$subvol" ]; then
            info "Creando subvolumen $subvol..."
            btrfs subvolume create "$MOUNT_POINT/$subvol" || error "No se pudo crear el subvolumen $subvol."
            exito "Subvolumen $subvol creado."
        else
            advertencia "El subvolumen $subvol ya existe."
        fi
    done

    # Mover datos existentes a los nuevos subvolúmenes
    info "Moviendo datos a los nuevos subvolúmenes..."

    # Mover raíz al subvolumen @
    rsync -aAXv --exclude={"/mnt/*","/home/*","/boot/*","/proc/*","/dev/*","/sys/*","/run/*","/tmp/*","/lost+found","/media/*","/swapfile"} /* "$MOUNT_POINT/@/" || error "Fallo al mover datos a @."

    # Mover /home al subvolumen @home
    if [ -d "/home" ]; then
        rsync -aAXv /home/ "$MOUNT_POINT/@home/" || error "Fallo al mover /home a @home."
    fi

    # Crear directorio .snapshots en @
    mkdir -p "$MOUNT_POINT/@/.snapshots"

    # Desmontar y volver a montar con los subvolúmenes
    umount "$MOUNT_POINT"

    # Realizar copia de seguridad de /etc/fstab
    cp /etc/fstab /etc/fstab.bak

    # Actualizar /etc/fstab
    info "Actualizando /etc/fstab..."
    cat << EOF > /etc/fstab
UUID=$UUID /          btrfs subvol=@,defaults,noatime,compress=zstd 0 1
UUID=$UUID /home      btrfs subvol=@home,defaults,noatime,compress=zstd 0 2
UUID=$UUID /.snapshots btrfs subvol=@/.snapshots,defaults,noatime,compress=zstd 0 2
tmpfs       /tmp      tmpfs defaults,noatime,mode=1777 0 0
EOF

    exito "/etc/fstab actualizado."

    # Re-montar el sistema de archivos
    info "Re-montando el sistema de archivos con los nuevos subvolúmenes..."
    mount -a || error "Fallo al montar los nuevos subvolúmenes."

    exito "Sistema de archivos Btrfs configurado correctamente."
}

# ... (El resto del script permanece igual)

#####################
# Ejecución del script
#####################

main() {
    verificar_root
    comprobar_conexion
    actualizar_sistema
    instalar_paquetes
    configurar_btrfs
    # ... (Llamadas a las demás funciones)
    exito "Proceso completado. Tu Arch Linux ahora es inmutable con actualizaciones transaccionales."
    info "Reinicia el sistema para aplicar todos los cambios."
}

# Ejecutar función principal
main
#test5
